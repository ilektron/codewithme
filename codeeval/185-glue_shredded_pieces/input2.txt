|s of the vertices, and |both cases a 1 indicate|is a modified form of t|oth cases a 1 indicates|ied form of the adjacen|rchhoff's theorem on th|e vertices, and is usef|raph. The distance matr|ws represent vertices a|er of spanning trees of|n matrix is a modified | which both the rows an|s theorem on the number|structures include the |cy matrix, in which bot|umns represent edges, a|t incorporates informat|test path between two v|matrix of 0's and 1's w|trix that incorporates |, and is useful in some|es of the vertices, and|0's and 1's whose rows |cency matrix, in which | objects. The Laplacian|d 1's whose rows repres|n the number of spannin|atrix is a modified for|ed by vertices, but rat|xed by vertices, but ra| columns represent edge| the degrees of the ver|s include the incidence|dence matrix, a matrix |ng trees of a graph. Th|cts. The Laplacian matr|trix, a matrix of 0's a|. In both cases a 1 ind|f the vertices, and is |acency matrix, has both| both cases a 1 indicat|wo non-adjacent objects|oth the rows and column|cates two non-adjacent |umber of spanning trees|jects and a 0 indicates|h between two vertices.|ike the adjacency matri|the rows and columns ar|represent edges, and th| the adjacency matrix, |ph. The distance matrix|ices. In both cases a 1| indicates two adjacent|jacency matrix that inc|es of a graph. The dist|adjacency matrix, in wh| information about the | of the vertices, and i|represent vertices and | a shortest path betwee|aplacian matrix is a mo|include the incidence m|x is a modified form of|d by vertices, but rath|jacency matrix, has bot|me calculations such as|in each cell it contain|trix, like the adjacenc|two non-adjacent object|rows and columns are in|ed by vertices. In both|n-adjacent objects. The|ce matrix, like the adj|1 in each cell it conta|e matrix, like the adja| objects and a 0 indica|atrix, like the adjacen|jacency matrix, in whic| of the adjacency matri|exed by vertices, but r|dified form of the adja|tices, and is useful in|cian matrix is a modifi|hoff's theorem on the n| matrix is a modified f| 1 in each cell it cont|orm of the adjacency ma| as Kirchhoff's theorem|s information about the|both its rows and colum|esent vertices and whos| matrix that incorporat|porates information abo|de the incidence matrix|o non-adjacent objects.|present vertices and wh| cell it contains the l|rix, has both its rows |its rows and columns in|ng a 0 or a 1 in each c|ncy matrix that incorpo|by vertices, but rather| vertices, but rather t|columns are indexed by |lculations such as Kirc|e calculations such as |es and whose columns re| adjacent objects and a|ning trees of a graph. |off's theorem on the nu|Kirchhoff's theorem on |that incorporates infor|sent vertices and whose|cent objects and a 0 in|djacency matrix that in| of 0's and 1's whose r|matrix, in which both t|ency matrix, has both i|useful in some calculat|t objects and a 0 indic| adjacency matrix that |ent vertices and whose |he degrees of the verti|, but rather than conta| length of a shortest p| The distance matrix, l| adjacency matrix, in w|rtices, but rather than| indicates two non-adja|ix of 0's and 1's whose|orporates information a|columns represent edges|e the adjacency matrix,|1 indicates two adjacen|x that incorporates inf|lude the incidence matr|0 indicates two non-adj| that incorporates info|a 0 or a 1 in each cell|corporates information |h of a shortest path be|t rather than containin|ix, like the adjacency | and is useful in some |hose columns represent | cases a 1 indicates tw|incorporates informatio|s whose rows represent |e the incidence matrix,| a graph. The distance |ees of the vertices, an|sent edges, and the adj|her than containing a 0|cy matrix that incorpor|he number of spanning t| indexed by vertices, b| matrix, like the adjac|he adjacency matrix tha|e length of a shortest | modified form of the a|in some calculations su|ns are indexed by verti|s useful in some calcul| of spanning trees of a|lumns indexed by vertic|1's whose rows represen|ces and whose columns r|e distance matrix, like|ts rows and columns ind|the incidence matrix, a|ctures include the inci|atrix that incorporates|d a 0 indicates two non|nce matrix, like the ad|hich both the rows and |djacent objects and a 0|djacent objects. The La|about the degrees of th|out the degrees of the |at incorporates informa|lumns represent edges, |shortest path between t|ome calculations such a| both the rows and colu|cent objects. The Lapla|uch as Kirchhoff's theo|nclude the incidence ma|ndexed by vertices, but|e incidence matrix, a m|r of spanning trees of |est path between two ve|ix that incorporates in|lumns are indexed by ve|s rows and columns inde|hortest path between tw|ncorporates information|rix, in which both the |whose columns represent|re indexed by vertices.|a shortest path between|on-adjacent objects. Th|ates two non-adjacent o|as both its rows and co|s, but rather than cont|indexed by vertices. In|rix, like the adjacency|ows represent vertices |dicates two non-adjacen|ontaining a 0 or a 1 in|ertices. In both cases | two non-adjacent objec|f's theorem on the numb|form of the adjacency m| theorem on the number |n some calculations suc| distance matrix, like |e degrees of the vertic| and columns are indexe|s of a graph. The dista|cency matrix, has both | each cell it contains | is a modified form of |ees of a graph. The dis|f 0's and 1's whose row|es information about th| Laplacian matrix is a |ts and a 0 indicates tw|rees of the vertices, a|y matrix, has both its | matrix, has both its r|th between two vertices|ices, but rather than c| in some calculations s|nd whose columns repres|tices, but rather than |orem on the number of s|nd a 0 indicates two no| 1 indicates two adjace|d is useful in some cal|rtest path between two |ortest path between two|acency matrix, in which| has both its rows and |adjacent objects and a | and columns indexed by|ch both the rows and co|a matrix of 0's and 1's| edges, and the adjacen|panning trees of a grap|eorem on the number of | 0's and 1's whose rows|e matrix, a matrix of 0| incidence matrix, a ma|t the degrees of the ve| rows and columns index|s represent vertices an| and 1's whose rows rep|vertices, and is useful| the adjacency matrix t|acent objects and a 0 i|mation about the degree|jacent objects. The Lap| form of the adjacency |stance matrix, like the|ces, but rather than co|cates two adjacent obje|rather than containing |nd 1's whose rows repre|ns such as Kirchhoff's | such as Kirchhoff's th| and a 0 indicates two |cases a 1 indicates two|adjacency matrix, has b|such as Kirchhoff's the|he adjacency matrix, ha|ces, and is useful in s|'s and 1's whose rows r| number of spanning tre|hat incorporates inform|d form of the adjacency|rows and columns indexe|matrix is a modified fo|ngth of a shortest path|fied form of the adjace|ns indexed by vertices,| structures include the|e Laplacian matrix is a|e indexed by vertices. |tions such as Kirchhoff|in which both the rows |are indexed by vertices|ent objects. The Laplac|graph. The distance mat|some calculations such | both its rows and colu|ther than containing a |like the adjacency matr|ency matrix that incorp|ncy matrix, in which bo|chhoff's theorem on the|and columns indexed by |nt edges, and the adjac|r than containing a 0 o|whose rows represent ve|ing trees of a graph. T|dicates two adjacent ob|of a shortest path betw|. The distance matrix, |rix is a modified form |rix structures include |tices and whose columns|olumns are indexed by v|grees of the vertices, |ian matrix is a modifie|ndicates two adjacent o|cy matrix, has both its|s and 1's whose rows re|s represent edges, and |es include the incidenc|rtices, and is useful i|d whose columns represe|ases a 1 indicates two |rm of the adjacency mat|t objects. The Laplacia| in which both the rows|Matrix structures inclu|ining a 0 or a 1 in eac|jects. The Laplacian ma|m of the adjacency matr|es two adjacent objects|ent edges, and the adja|ations such as Kirchhof|objects and a 0 indicat|, in which both the row|indexed by vertices, bu|ulations such as Kirchh|ncidence matrix, a matr|lacian matrix is a modi|nt objects and a 0 indi| but rather than contai| represent edges, and t|s both its rows and col|ows and columns indexed| matrix, in which both | by vertices. In both c|han containing a 0 or a|rix that incorporates i|se rows represent verti|t edges, and the adjace|trix structures include| graph. The distance ma|atrix, a matrix of 0's |x, in which both the ro|nformation about the de|ach cell it contains th|ed form of the adjacenc|length of a shortest pa|odified form of the adj| its rows and columns i|g trees of a graph. The|es, and is useful in so|atrix, in which both th|ates information about | whose columns represen|tes two adjacent object|ates two adjacent objec|matrix that incorporate| spanning trees of a gr|objects. The Laplacian | a 1 indicates two adja|ified form of the adjac|ts. The Laplacian matri|oth its rows and column|The Laplacian matrix is|adjacency matrix that i|y matrix, in which both|th its rows and columns|than containing a 0 or |ose columns represent e|rem on the number of sp| of a shortest path bet|s two adjacent objects |acent objects. The Lapl|trix is a modified form|tes information about t|ns the length of a shor|e adjacency matrix, has|a 1 indicates two adjac|ntains the length of a |ices, and is useful in |taining a 0 or a 1 in e|the number of spanning |x structures include th|icates two adjacent obj|tance matrix, like the |e rows represent vertic|d columns indexed by ve|vertices and whose colu|ut the degrees of the v|the degrees of the vert|and the adjacency matri| matrix, a matrix of 0'|ures include the incide|0 or a 1 in each cell i|ch cell it contains the|d the adjacency matrix,| 1's whose rows represe|'s whose rows represent|x, a matrix of 0's and |ws and columns indexed | two adjacent objects a|f the adjacency matrix |y vertices. In both cas|ix, in which both the r|ormation about the degr|s such as Kirchhoff's t|ut rather than containi|ses a 1 indicates two a|orates information abou|ul in some calculations|anning trees of a graph|ix structures include t|th of a shortest path b|two adjacent objects an| degrees of the vertice|matrix, like the adjace|ation about the degrees|s and whose columns rep|contains the length of |s. In both cases a 1 in|n about the degrees of | shortest path between |s two non-adjacent obje| columns indexed by ver|x, has both its rows an| like the adjacency mat|, a matrix of 0's and 1|adjacent objects. The L|epresent edges, and the| whose rows represent v|ains the length of a sh|nt objects. The Laplaci|umns are indexed by ver|and 1's whose rows repr|mns are indexed by vert|ich both the rows and c|or a 1 in each cell it |s. The Laplacian matrix|f a graph. The distance|ion about the degrees o|n both cases a 1 indica|n which both the rows a|ontains the length of a|hhoff's theorem on the |ects. The Laplacian mat|matrix, a matrix of 0's|jacent objects and a 0 |he Laplacian matrix is |cency matrix that incor| 0 indicates two non-ad|ndicates two non-adjace| calculations such as K|the adjacency matrix, i|heorem on the number of|trix, has both its rows|e rows and columns are |seful in some calculati|as Kirchhoff's theorem |it contains the length | on the number of spann|dexed by vertices, but | of a graph. The distan|r a 1 in each cell it c|s and columns are index|. The Laplacian matrix |eful in some calculatio|y matrix that incorpora|h as Kirchhoff's theore|degrees of the vertices| a 0 or a 1 in each cel|h both the rows and col|vertices, but rather th|hose rows represent ver|ose rows represent vert|ix, has both its rows a|Laplacian matrix is a m|cell it contains the le| the incidence matrix, |rmation about the degre|mns represent edges, an|ices and whose columns |and whose columns repre|s and columns indexed b|nd is useful in some ca|ins the length of a sho|The distance matrix, li| the number of spanning|s the length of a short|spanning trees of a gra| a 0 indicates two non-|ns represent edges, and|ell it contains the len|exed by vertices. In bo| and the adjacency matr|aph. The distance matri| and whose columns repr|atrix of 0's and 1's wh|es, and the adjacency m|ath between two vertice|ful in some calculation|of 0's and 1's whose ro| incorporates informati|t vertices and whose co|of a graph. The distanc|and a 0 indicates two n|of the adjacency matrix|rates information about|ces. In both cases a 1 |djacency matrix, in whi|ix, a matrix of 0's and| trees of a graph. The | a matrix of 0's and 1'|d columns are indexed b|se columns represent ed|th cases a 1 indicates |d by vertices. In both |djacency matrix, has bo|t contains the length o| in each cell it contai|he vertices, and is use|lations such as Kirchho|ence matrix, a matrix o|h. The distance matrix,|em on the number of spa|he incidence matrix, a |ning a 0 or a 1 in each|columns indexed by vert|wo adjacent objects and|-adjacent objects. The |s a modified form of th|formation about the deg|st path between two ver|o adjacent objects and |ects and a 0 indicates |acian matrix is a modif|he distance matrix, lik|esent edges, and the ad| the rows and columns a|ows and columns are ind|ce matrix, a matrix of |a 1 in each cell it con|theorem on the number o|modified form of the ad|resent vertices and who|s, and is useful in som|and is useful in some c|icates two non-adjacent|ance matrix, like the a|which both the rows and|h the rows and columns |nning trees of a graph.|tains the length of a s|s Kirchhoff's theorem o|placian matrix is a mod|ertices and whose colum|path between two vertic| it contains the length|l in some calculations |nce matrix, a matrix of|e columns represent edg|vertices. In both cases|rees of a graph. The di| a modified form of the|umns indexed by vertice|information about the d|ix is a modified form o|trees of a graph. The d|by vertices. In both ca|m on the number of span|rporates information ab|the length of a shortes|present edges, and the | is useful in some calc| include the incidence |tices. In both cases a |is useful in some calcu| rows represent vertice| rather than containing|tes two non-adjacent ob|dges, and the adjacency|ons such as Kirchhoff's|In both cases a 1 indic|non-adjacent objects. T|ll it contains the leng|egrees of the vertices,|ent objects and a 0 ind|e adjacency matrix, in | vertices. In both case|a modified form of the |f a shortest path betwe| In both cases a 1 indi| 0 or a 1 in each cell |, like the adjacency ma|tion about the degrees |bjects. The Laplacian m|of the vertices, and is| containing a 0 or a 1 |s a 1 indicates two adj|dexed by vertices. In b|'s theorem on the numbe|trix, in which both the| The Laplacian matrix i|ions such as Kirchhoff'|clude the incidence mat| the adjacency matrix, |indicates two non-adjac|gth of a shortest path | non-adjacent objects. | about the degrees of t|resent edges, and the a|bout the degrees of the|ertices, but rather tha|bjects and a 0 indicate|he adjacency matrix, in| adjacency matrix, has |rix of 0's and 1's whos|olumns indexed by verti|es two non-adjacent obj|nd the adjacency matrix|aining a 0 or a 1 in ea|ather than containing a|number of spanning tree|l it contains the lengt|t path between two vert|the adjacency matrix, h|x, like the adjacency m|has both its rows and c|irchhoff's theorem on t|er than containing a 0 |h its rows and columns |ency matrix, in which b|cts and a 0 indicates t|rtices. In both cases a|nd columns are indexed |s indexed by vertices, |atrix structures includ|the vertices, and is us|nd columns indexed by v|, has both its rows and|mber of spanning trees |epresent vertices and w|ber of spanning trees o| by vertices, but rathe| are indexed by vertice|uctures include the inc|g a 0 or a 1 in each ce|ertices, and is useful |he length of a shortest|rtices and whose column| path between two verti|s are indexed by vertic|he rows and columns are|es a 1 indicates two ad| contains the length of|res include the inciden|indicates two adjacent | rows and columns are i|cidence matrix, a matri|ing a 0 or a 1 in each |rix, a matrix of 0's an| matrix of 0's and 1's |, and the adjacency mat|ws and columns are inde|x of 0's and 1's whose | a 1 in each cell it co|an matrix is a modified|ength of a shortest pat|atrix, has both its row|a graph. The distance m|ff's theorem on the num|tructures include the i|h cell it contains the |matrix, has both its ro|ncy matrix, has both it|s, and the adjacency ma|istance matrix, like th|on the number of spanni|but rather than contain|of spanning trees of a | some calculations such|containing a 0 or a 1 i|s and a 0 indicates two|trix of 0's and 1's who| or a 1 in each cell it|nt vertices and whose c| useful in some calcula|h cases a 1 indicates t|ude the incidence matri|ndexed by vertices. In |es. In both cases a 1 i| than containing a 0 or| vertices, and is usefu|e adjacency matrix that| vertices and whose col|edges, and the adjacenc|a 0 indicates two non-a|distance matrix, like t|ch as Kirchhoff's theor| Kirchhoff's theorem on|on about the degrees of|incidence matrix, a mat|mns indexed by vertices|olumns represent edges,|xed by vertices. In bot|ges, and the adjacency |th the rows and columns|tures include the incid|idence matrix, a matrix|an containing a 0 or a | the length of a shorte|n each cell it contains|ke the adjacency matrix|culations such as Kirch|rows represent vertices|each cell it contains t|alculations such as Kir|acency matrix that inco|es, but rather than con| represent vertices and|y vertices, but rather | indexed by vertices. I|and columns are indexed|f spanning trees of a g|calculations such as Ki|ructures include the in| columns are indexed by|both the rows and colum|ntaining a 0 or a 1 in |e number of spanning tr|n containing a 0 or a 1| the vertices, and is u|the adjacency matrix th|
|l foundation|unning softw|nalyzing bio|roduce meani|tem theory, |ion theory, |ematics, con| theory, and|ta mining, i| algorithms |and running | processing,|ng software |gful informa|in turn depe|ocessing, an|formation th|uter simulat|heory, syste|heory, infor|em theory, i|ntelligence,|tion involve|rmation invo|te mathemati|rocessing, a|graph theory|are programs|ce, soft com|involves wri|r simulation|mathematics,|running soft|retical foun|essing, and |ons such as | soft comput|ting and run| and running|m graph theo|tics, contro|elligence, s|ological dat|ata mining, |d statistics|y, system th| and compute|y, informati|ory, artific|g biological| software pr|ata to produ|ngful inform|uce meaningf|s discrete m|g and runnin|ontrol theor|eory, artifi| use algorit|y, artificia|ical foundat|uch as discr|alyzing biol|e processing|logical data|ms that use |ph theory, a|ining, image|theoretical |rete mathema| intelligenc|er simulatio|formation in|rithms from |ry, artifici|ol theory, s|ormation the| mining, ima|data to prod|as discrete |ation. The a| system theo|undations su|m theory, in|ory, informa|al data to p|n theory, an|d computer s|turn depend |tificial int|rtificial in| foundations|se algorithm|ation theory|heory, artif|processing, |l informatio|ftware progr|information |stem theory,|e, soft comp|ns such as d|n turn depen|ficial intel|ion. The alg|o produce me|ningful info|atics, contr|omputing, da|lligence, so|iological da|theory, and |ng, image pr|al foundatio|lyzing biolo|l data to pr|ning, image |, artificial|mation invol|hat use algo|telligence, |tical founda| simulation.|es writing a|icial intell|e meaningful|trol theory,|ogical data | theory, art|ning softwar|imulation. T| theory, sys|discrete mat|ificial inte|ics, control|ndations suc|algorithms i|athematics, |ing, image p| discrete ma|software pro|l intelligen|thematics, c|rn depend on|ing and runn|d running so|ng, data min|nformation t|system theor|ng and runni|l theory, sy|mputer simul|depend on th|re programs |produce mean|crete mathem|oft computin| involves wr|algorithms f|lgorithms fr|age processi|rol theory, |d on theoret|urn depend o|gical data t|grams that u| meaningful |uting, data | biological |. The algori|computer sim|hematics, co|tions such a| as discrete|oftware prog|he algorithm|ams that use|lves writing| information|at use algor|s writing an|, informatio|iting and ru|theory, info|h theory, ar|eoretical fo|biological d|screte mathe|cs, control |intelligence| control the|iscrete math|s such as di|heoretical f|ligence, sof|, and statis|tware progra|t use algori| data mining|nd on theore|ingful infor|on theory, a| turn depend|ial intellig|thms in turn|mation theor|lgorithms in|igence, soft| running sof|gorithms fro|a to produce|yzing biolog|ware program|s in turn de|on theoretic|aph theory, |simulation. |thms from gr|ta to produc|that use alg|nce, soft co| statistics.| mathematics|s that use a| computer si|cial intelli|a mining, im|ithms in tur|e programs t|Analyzing bi|hms from gra| The algorit|etical found|ft computing|data mining,|image proces| algorithms |such as disc| and statist| computing, |nd statistic|cal data to |n theoretica|ing biologic|mining, imag| graph theor|epend on the|ms from grap|nd running s|ete mathemat|puter simula|olves writin|, and comput|ations such |on. The algo|ory, and sta|ing software|ical data to|dations such| to produce |ul informati|ograms that |, image proc|mputing, dat|ms in turn d| programs th|artificial i|ormation inv|eory, system|soft computi|rithms in tu|n depend on |ge processin|ter simulati|zing biologi|s from graph|ng biologica|t computing,|volves writi|tion theory,|g, data mini|g software p|ory, system |omputer simu|, soft compu|nning softwa|to produce m|ce meaningfu|ry, informat|ation involv|gorithms in |ful informat|and computer|cessing, and|gence, soft |computing, d|ntrol theory|ystem theory|ulation. The|ing, and com| theoretical|rom graph th| information|tion. The al|information |eory, inform|y, and stati|g, and compu| on theoreti|matics, cont|heory, and s|ion involves|al intellige|, data minin| such as dis|ting, data m|ithms from g| depend on t| that use al|puting, data|control theo|s, control t|cal foundati|nvolves writ|oduce meanin|orithms from| artificial |rmation theo|rograms that|, system the|mage process|e mathematic|ch as discre|theory, arti|, control th|writing and |mulation. Th|oretical fou|and statisti|e algorithms|The algorith|n involves w|eaningful in|ing, data mi|end on theor|om graph the|from graph t|riting and r|orithms in t| produce mea| writing and|raph theory,| from graph |theory, syst|lation. The |h as discret|on involves |foundations |eory, and st| data to pro|meaningful i|use algorith|nd computer |n. The algor|ence, soft c|pend on theo|duce meaning|programs tha|ves writing |oundations s|sing, and co|rams that us|ng, and comp|g, image pro|ions such as|hms in turn |ry, system t|ry, and stat|ssing, and c|nformation i| in turn dep| theory, inf|e algorithms| image proce|aningful inf|
|ut the vali|ods to samp|ting new hy|d. These me|et that are|d terms dat|in creating|de about th|ging, data |f data mini|erences to | for reliab| of a large|e statistic|ating new h|r populatio|atistical i|mple parts |inferences |of a larger|an, however| against th|e related t|t are (or m|es to be ma|nst the lar|mall for re|use of data|be) too sma|ta snooping|ses to test|data fishin|to sample p|These metho|fishing, an|rts of a la|a mining me| (or may be|oo small fo| refer to t|rns discove|ing, and da|atterns dis|ed. These m|n, however,|ing refer t| statistica|r may be) t| test again|hods to sam|, data fish|l inference|however, be|used in cre|or reliable|data popula| in creatin|e of data m|dging, data|patterns di| a larger p|ng new hypo| to test ag|creating ne| about the |a dredging,|arger data |ta mining m|idity of an|le parts of|nferences t|ences to be|potheses to| methods to|ion data se|nces to be |t the valid|ainst the l|ces to be m|eating new |se of data |ining metho|and data sn|r data popu|ger populat|ta fishing,| be made ab|reating new|data snoopi|ypotheses t|st the larg|e made abou|at are (or |ated terms |able statis| data set t| larger dat|e parts of |istical inf| reliable s|ed in creat|theses to t| dredging, |g new hypot| data fishi|arger popul|shing, and |related ter|e validity |t that are | data minin|al inferenc|ning method|ping refer |test agains|ng, and dat|ulation dat|against the|, however, |ng refer to|too small f|ed terms da| however, b| and data s|vered. Thes|reliable st|s data dred|e methods c|populations|w hypothese|ver, be use|of any patt|ay be) too |sed in crea|ng methods |liable stat|ing, data f|terns disco|ata snoopin|n creating | mining met| use of dat|opulation d|hing, and d|e larger da|ll for reli|ation data |inst the la| inferences|e about the|tion data s|ata populat|tterns disc|e) too smal|o sample pa|are (or may|t the large| data popul|to the use |bout the va|f any patte| larger pop| to be made|ata set tha|er data pop|er to the u|a larger po|population | creating n|, and data |a snooping | small for |hypotheses |a populatio|snooping re|n data set |heses to te|ered. These|ing new hyp| made about|e used in c|he related |of data min|ooping refe|edging, dat| are (or ma| set that a|g, and data|statistical|s can, howe|re (or may | related te| too small |can, howeve|ata fishing|arts of a l|s to sample|ample parts|larger popu| data snoop|y be) too s| population|erns discov|ds can, how|nooping ref| used in cr|ta set that|ts of a lar|he use of d|g, data fis|lation data|scovered. T|r to the us|pulation da|nd data sno|o test agai|terms data |s discovere|methods to |thods can, |ds to sampl|to test aga| snooping r|hat are (or|thods to sa|mining meth|y patterns |ble statist|be made abo|st against |erms data d|) too small|the larger |e use of da|ns discover|t against t| parts of a|d in creati|to be made |tistical in| patterns d|ing methods|cal inferen| hypotheses|(or may be)| methods ca| to the use|r reliable | discovered|ger data po|larger data|lated terms|lidity of a| the use of|wever, be u|ata mining | terms data|the use of |gainst the |out the val|, be used i|he validity|a fishing, |ods can, ho|on data set|o the use o|opulations.|oping refer|overed. The|tatistical |data dredgi|validity of|ta dredging| population|r, be used | of data mi|rms data dr| of any pat| validity o|rger data p|made about |stical infe|discovered.| any patter|o small for|methods can|iable stati|that are (o|ade about t|ity of any |otheses to |data mining|parts of a |f a larger |l for relia|tical infer|small for r|ethods can,|may be) too|d data snoo| that are (|es to test |new hypothe|ple parts o| data dredg|hese method|fer to the |ever, be us| These meth|ta populati|s to be mad|owever, be |se methods |le statisti| the larger|ferences to|rger popula|efer to the|g methods t|all for rel|ew hypothes|covered. Th|alidity of |set that ar| can, howev| new hypoth| may be) to|a set that |ted terms d|ishing, and|be used in | be used in|ata dredgin|the validit|rences to b|o be made a|dredging, d|ny patterns|s to test a|hods can, h| to sample | the validi|for reliabl|ng, data fi|red. These |The related|dity of any|or may be) | fishing, a|he larger d|sample part|elated term|est against|about the v|e (or may b|ethods to s|ese methods| be) too sm|redging, da| sample par|eses to tes|data set th|s of a larg|y of any pa|ms data dre|ical infere|iscovered. |g refer to |refer to th|er, be used|er populati|. These met|ty of any p|eliable sta|any pattern|
|uitive t|ve than | and muc|redictiv|have bee|s, trend|itive th|Studies |gital, l|vering s|in order| visual |much mor|a, in or| digital|See also|dictive |ditional|s. Studi|est visu|alogical|ets have|ocess of|ds and i|n genera|intuitiv|, trends|ild pred|ta minin|erns, tr|re intui|al patte|llected,|mputer v| of turn|ogical i|53][54][|istical |a mining|from ana|r to bui|so Compu|] See al|large da| build p|n order | and inf|suggest |in data,| mining |ore intu|stored d|idden in| process|5] See a|ional da| statist| large d|ch more |uter vis|ical pat|sets hav|patterns|is hidde|e proces|nal data|rge data|54][55] |tive pat|ning fro| turning|[54][55]|rns, tre|Computer|rom anal|ring sta|informat|overing |and much| is fast|tical pa|covering|mation w| have be|g from a|ve patte|ing.[53]|tal, lar|n which |the proc|discover|into dig|ave been|atterns.| collect|s have b|been gen|den in d|ctive pa|visual d|en gener|ng.[53][|nerated,|predicti| order t| in orde| generat|ata mini|, collec|data min|cal into|an is tr|h more i|ts have |data set|of turni|statisti|rocess o|ta minin|also Com|ing from|o Comput| sets ha|omputer |, large |cess of |arge dat|trends a|ted, col|ends and|d, colle|55] See |tional d|ess of t|h is hid|hidden i|ive patt|ns, tren|l data m|ed disco|cal patt|nd infor|tistical|e been g|st visua|ta sets |ining.[5|al, larg|l, large| stored |itional |tudies s|ata mini| hidden | intuiti|tive tha|f turnin|l patter| from an|which is|ored dis|e also C|en in da|and info|d predic|han is t|than is |to build|. Studie|dden in |ntuitive|d much m|ing is f|nformati|ng from | traditi|ormation| discove|more int|rends an|ggest vi|ter visi|and stor|nds and |ich is h|[53][54]|collecte|nto digi|ss of tu|d, and s|build pr|e intuit|ies sugg|ing stat|er visio| suggest| and sto|t visual|n data, |order to|puter vi|lected, |ining is|, in ord|n is tra|nalogica|ta, in o|ld predi|aditiona|turning |ion whic|urning f| data mi| much mo|s and in|analogic|is faste|on which|rns. Stu|a sets h|sual dat|n in dat|ve been |is tradi|ng stati|to digit|process |faster a|atistica|ning is |ictive p|nd store|][55] Se| is trad|ected, a|.[53][54|d discov| informa| been ge|lso Comp| pattern|d stored| which i|ge data | in data| See als| mining.|isual da|s sugges|formatio|ual data| Compute|rning fr|][54][55| data, i| than is|e than i|data min|r and mu|ch is hi|traditio|aster an| analogi|e data s|edictive|erns. St|ital, la|patterns|logical |ed, coll| trends |udies su|ter and |d inform|rated, c|ical int|o build |generate|ted, and|nd much |gical in|enerated|stical p|een gene| faster |ed, and |o digita|ng is fa|tuitive |, and st|uild pre| pattern| data mi|ata, in |mining.[|ata sets| more in|tatistic|digital,|ation wh|rmation |der to b|gest vis| the pro|g.[53][5|mining i|ster and|tion whi|In the p| to buil|e patter|l into d|ive than|er and m|g is fas|al data |4][55] S|s faster| Studies|red disc|he proce|ns. Stud|tored di|al data |scoverin| predict|ee also |hich is |al into |terns. S|3][54][5|m analog|g statis|uch more|ering st|terns, t|er to bu|[55] See|onal dat|s hidden| into di|n the pr| vision.|tterns. |igital, |ning.[53|uggest v|radition|s tradit|erated, |atterns,|tterns, |dies sug|s of tur|ated, co|ollected|r vision|a mining|es sugge|cted, an|l data m| also Co|data, in|om analo| data se|rder to | is hidd|iscoveri|
|ly, larger v|ation,[5] bu|en classes l|duce the eff|ample (i.e. |ise on the c|al case wher|mple (i.e. w|t of noise o|rger values |ss is predic|hbor algorit|mization). T|i.e. when k |es (see hype|redicted to |f noise on t| training sa| by various |us heuristic|cted to be t|predicted to|. A good k c| noise on th|ess distinct|f k reduce t|ques (see hy|he classific|larger value|on). The spe|ameter optim| k = 1) is c| choice of k| the classif|n classes le|s between cl|ed to be the|rparameter o| less distin|(i.e. when k| selected by|en k = 1) is|le (i.e. whe|or algorithm|various heur| A good k ca|when k = 1) |on the data;|ristic techn|ta; generall|on the class|k = 1) is ca|s distinct. |imization). |he class of | k reduce th|inct. A good| the data; g| on the clas|lass of the |he class is |alues of k r|nearest neig|ecial case w|optimization| k depends u|e (i.e. when|e the class |e where the |e nearest ne|od k can be |ion,[5] but | various heu|ptimization)|e effect of |the class of|= 1) is call| of noise on|es less dist|losest train|ase where th|s heuristic |uristic tech| called the |arious heuri|er values of|ification,[5|ation). The |re the class|the nearest |ke boundarie|ues (see hyp|ed the neare|ct of noise |the classifi|generally, l|nct. A good | depends upo|ng sample (i|class is pre|see hyperpar| distinct. A|k depends up|where the cl|ata; general|ee hyperpara|ass of the c|ut make boun| to be the c| nearest nei|ect of noise|zation). The|lassificatio|e data; gene|tic techniqu|1) is called| case where | good k can |oundaries be|aries betwee|s of the clo|The special |t training s|alled the ne|r algorithm.|d by various|est training| between cla|ues of k red|boundaries b|ial case whe|here the cla|tion,[5] but|l case where|heuristic te| values of k|on,[5] but m|e of k depen| special cas|sample (i.e.|nds upon the|euristic tec|ce the effec|cted by vari|the effect o| is called t|enerally, la|epends upon |rious heuris|can be selec|r optimizati| techniques |pends upon t|d k can be s|the data; ge| class of th|ass is predi|ication,[5] | data; gener|lled the nea|k reduce the|y, larger va|s called the|c techniques|parameter op|ion). The sp|, larger val|lass is pred|se where the|hyperparamet| the effect |t. A good k |ds upon the |effect of no|make boundar|depends upon| The special|but make bou|nerally, lar|e closest tr|meter optimi|techniques (|k can be sel|rameter opti|e classifica|o be the cla| neighbor al|choice of k |ted to be th|ice of k dep|s of k reduc|). The speci|case where t|is called th|e class of t|cation,[5] b|values of k |ghbor algori| where the c| 1) is calle| be the clas|es of k redu|se on the cl|e hyperparam|neighbor alg|of noise on | larger valu|is predicted|between clas|oice of k de|arger values|e. when k = |ected by var|fication,[5]| of k depend|e boundaries|ere the clas|by various h| be selected|ses less dis|arest neighb|selected by |(see hyperpa|erparameter | classes les|f k depends | reduce the | of k reduce|timization).|e on the cla|less distinc|hoice of k d|sest trainin|educe the ef|A good k can| the class o|training sam|; generally,|oise on the | class is pr|es between c|sses less di|st neighbor |f the closes|dicted to be|best choice | generally, |of k depends|[5] but make|ous heuristi|st training |closest trai|r values of |aining sampl|data; genera|er optimizat| but make bo|y various he|the class is|ndaries betw|5] but make |raining samp|tinct. A goo|e selected b| effect of n|ter optimiza|lues of k re|ffect of noi| k can be se|reduce the e|s upon the d|a; generally| the closest|erally, larg|eighbor algo|lasses less |to be the cl|pon the data|ning sample |chniques (se|st choice of|) is called |classificati|ries between|he effect of|t make bound|ween classes|lly, larger |edicted to b|icted to be |een classes |iques (see h|n,[5] but ma|cial case wh|t choice of |d the neares|rally, large|] but make b|good k can b|niques (see |an be select|pecial case |hniques (see|etween class|ss of the cl|stinct. A go|n be selecte| optimizatio| make bounda|hen k = 1) i|e the class |he data; gen| best choice|s less disti|ger values o|tion). The s|sification,[|. The specia|ization). Th|ends upon th|of the close|earest neigh|the closest |ood k can be|ted by vario|assification|.e. when k =|s is predict|he closest t|ake boundari|special case|ious heurist|s predicted |ies between | sample (i.e|class of the|bor algorith|ct. A good k|led the near|ssification,|tween classe| boundaries | the nearest| the class i|e best choic| can be sele|ic technique|e the effect|undaries bet|osest traini|,[5] but mak|n). The spec|lected by va|t neighbor a|elected by v|est neighbor|asses less d|n the classi|eter optimiz|be selected |ed by variou|g sample (i.|of k reduce |noise on the|ing sample (|arameter opt|daries betwe|est choice o|ss distinct.| predicted t|The best cho| hyperparame|classes less|fect of nois|ally, larger|n the data; | classificat|ighbor algor|d to be the | = 1) is cal| heuristic t|he best choi|e special ca|istic techni|stic techniq|rest neighbo|. when k = 1| closest tra|e class is p| (i.e. when |he nearest n|echniques (s|ce of k depe| of the clos|uce the effe|n k = 1) is |s (see hyper|yperparamete|istinct. A g|he special c|ining sample| upon the da| (see hyperp|upon the dat|be the class|ple (i.e. wh| when k = 1)|distinct. A |perparameter| is predicte|called the n|
|odel and al|r less the |el and algo|thmic model| two statis|d algorithm|ling paradi|c model' me|tical model|ms: data mo| Random for|ess the mac|ic model,[1|digms: data|ke Random f| algorithmi|s the machi|' means mor| or less th| model,[14]|chine learn|l modelling|ta model an|stinguished|tistical mo|4] wherein | model and |mic model,[|thmic model|rithms like| the machin|cal modelli|aradigms: d|ata model a|odel' means|gorithmic m|: data mode|machine lea|ne learning|ithmic mode|re or less |d two stati|dom forest.|el' means m|lling parad|iman distin|herein 'alg|odelling pa|nguished tw|ing paradig|eo Breiman |shed two st|an distingu|orithms lik|istinguishe|model and a|data model |paradigms: | less the m|delling par| Breiman di|hms like Ra| model' mea|e learning |gorithms li|two statist|rein 'algor|ein 'algori|Breiman dis| data model| wherein 'a|ike Random |ng paradigm|hmic model,|[14] wherei|del' means |s more or l|like Random|lgorithmic |erein 'algo|ning algori|ans more or|uished two |rning algor|e machine l| statistica|ithms like |he machine |Leo Breiman|less the ma|model' mean|ms like Ran|tatistical |distinguish|al modellin|ore or less|more or les|e Random fo|adigms: dat| means more|ine learnin|o statistic|n distingui|radigms: da|c model,[14|ished two s|'algorithmi|ithmic mode|o Breiman d|ic model' m|algorithmic|mic model' |learning al|l,[14] wher|n 'algorith|rithmic mod|el,[14] whe|eans more o|thms like R|man disting|wherein 'al|earning alg|del and alg|ed two stat| more or le|Random fore|hmic model'| and algori|or less the|inguished t|orithmic mo| learning a|wo statisti|ns more or |14] wherein|ss the mach|achine lear| algorithms|istical mod|model,[14] |statistical|reiman dist|g algorithm| 'algorithm| distinguis|guished two|eiman disti|del,[14] wh|odel,[14] w| paradigms:|ing algorit|gorithmic m|l and algor|algorithmic|arning algo|] wherein '|stical mode|,[14] where|hed two sta|g paradigms|ng algorith|atistical m|s like Rand|andom fores|s: data mod|ndom forest| like Rando|and algorit|igms: data |e or less t|in 'algorit|means more |lgorithmic |a model and| machine le|l' means mo|nd algorith| modelling |elling para|tinguished |hine learni|ical modell|lgorithms l|the machine|rithmic mod|gms: data m|orithmic mo|algorithms |modelling p|
|-cost cyclic |ding the leas|m, and happen| NP-hard prob|non-empty sub|Another examp|all nodes of |ro? That is a|his is common|gers, does an|subset of the|lem is the de|m add up to z|sum problem, | traveling sa| graph. This | a set of int|blem, and hap|ommonly known|ision problem|an problem.[4|set of intege|xample of an |e. Another ex|ic route thro| nodes of a w| This is comm|odes of a wei|is commonly k|ers, does any|ero? That is |a set of inte|hted graph. T|blem is the d|gh all nodes |ny non-empty |on subset sum|cyclic route |cost cyclic r|ample of an N|an NP-hard pr|lem of findin| optimization| least-cost c|d up to zero?|aph. This is |is: given a s|problem of fi|ch is this: g|ard problem i|s any non-emp|cision subset|finding the l|y subset of t|n NP-hard pro|known as the |east-cost cyc|P-hard proble| of an NP-har|an NP-hard pr| is a decisio| commonly kno|nly known as | does any non|is the optimi|ple of an NP-|hich is this:|bset of them |sion subset s|other example|monly known a|s the traveli|is the decisi|set of them a|NP-complete. |t cyclic rout|ing the least|of them add u|sion problem,|ecision subse| example of a|given a set o|e decision su| sum problem,|c route throu|alesman probl|, which is th|P-complete. A|ecision probl|e traveling s| decision sub|eling salesma|the traveling| problem is t|n example of |, and happens| integers, do| of a weighte|-hard problem|integers, doe|o? That is a |on-empty subs|o zero? That |weighted grap|and happens t|lete. Another| the travelin|y non-empty s| an NP-hard p| to zero? Tha| problem of f|e through all|e of an NP-ha|oblem of find| all nodes of|n NP-hard pro|h is this: gi|s, does any n|tegers, does |set sum probl|does any non-|ly known as t|be NP-complet|pens to be NP|of a weighted| That is a de|the least-cos|plete. Anothe| salesman pro|rd problem is| Another exam|t of integers|. This is com| them add up | to be NP-com|An example of|her example o|f integers, d|ptimization p|ther example |ization probl|s the decisio|? That is a d|example of an|-empty subset|them add up t|n problem.[4]|s is commonly|nd happens to|ighted graph.|is this: give|t of them add|oblem is the |d happens to |es of a weigh| the optimiza|en a set of i| the decision|decision prob|ens to be NP-|sman problem.|ling salesman|example of an|ll nodes of a|e NP-complete|, does any no|g the least-c|-complete. An|nodes of a we|ich is this: |ion problem o|des of a weig|oute through | weighted gra| subset of th|this: given a|raph. This is|p to zero? Th| as the trave|y known as th|f a weighted |ph. This is c|t is a decisi|roblem, which|roblem is the|em, and happe|e least-cost |te through al|t-cost cyclic|only known as|m is the deci|f an NP-hard |m problem, wh|lem is the op|ng the least-|et of them ad|to zero? That| the least-co|ard problem i|cision proble| is commonly |ntegers, does|aveling sales|lic route thr|es any non-em|ision subset |graph. This i|r example of |mization prob| NP-complete.| zero? That i|dd up to zero|P-hard proble| this: given |s a decision |NP-hard probl|any non-empty|mpty subset o|o be NP-compl| is the decis| add up to ze|problem, whic|t sum problem|m is the opti|traveling sal|ing salesman |decision subs|on problem, a|m of finding |em add up to |et sum proble|hat is a deci|s of a weight|timization pr|s to be NP-co|tion problem |ple of an NP-|ubset of them|nother exampl|problem is th| example of a| an NP-hard p|veling salesm|appens to be | is the optim|least-cost cy|hrough all no|oes any non-e|ation problem| given a set |route through|ample of an N| of them add |salesman prob|s this: given|ghted graph. |g salesman pr|a decision pr|um problem, w|e of an NP-ha|st cyclic rou|omplete. Anot|e optimizatio|raveling sale|hard problem |: given a set|as the travel|te. Another e|bset sum prob|roblem of fin|he least-cost|of integers, |d problem is |n a set of in| a weighted g|ty subset of | set of integ| known as the| NP-hard prob| problem, and|complete. Ano|eighted graph|ubset sum pro|the optimizat| subset sum p|of finding th|his: given a | through all |esman problem|to be NP-comp|subset sum pr|of an NP-hard|s the optimiz|iven a set of|rd problem is| is this: giv|h all nodes o|zero? That is|s commonly kn|zation proble|h. This is co|own as the tr| route throug|man problem.[|n-empty subse|pty subset of| of an NP-har|et of integer|em, which is |problem, and |up to zero? T|em is the opt|mplete. Anoth|ion subset su|em of finding|d problem is |blem is the o|mple of an NP|egers, does a|blem of findi|n subset sum |That is a dec|lesman proble|optimization |l nodes of a |le of an NP-h|roblem is the|he decision s|rough all nod|s: given a se|rs, does any |oblem is the |through all n|clic route th| problem is t|n as the trav|mmonly known |wn as the tra| happens to b|m, which is t|ete. Another |le of an NP-h| of integers,|ough all node|oblem, and ha|is a decision| finding the |f finding the| be NP-comple|add up to zer|st-cost cycli|roblem, and h| non-empty su|on problem of| decision pro|xample of an | which is thi|at is a decis|ppens to be N|n problem, an| problem, whi|oblem, which |blem, which i| a decision p|nding the lea|the decision | up to zero? |n problem of |NP-hard probl|mple of an NP|ost cyclic ro| any non-empt|ute through a|he optimizati|em is the dec|empty subset |a weighted gr|-hard problem| cyclic route|problem is th|happens to be|f an NP-hard |of an NP-hard|ven a set of |ng salesman p|commonly know|hem add up to|lem, which is|d graph. This|ugh all nodes|. Another exa|f them add up|ns to be NP-c| of finding t|he traveling | and happens |inding the le|nown as the t|ast-cost cycl|This is commo|ted graph. Th|imization pro|ion problem, |ed graph. Thi|hard problem |lem, and happ|er example of|is is commonl|yclic route t|which is this|
|of algorithms and compu|omputability theory. A |ereas the latter asks a|n principle, be solved |is of algorithms and co|d computational complex|e problem. More precise|eneral question about a|exity from computabilit|le algorithms that coul|the latter asks a more |nce are analysis of alg|a particular algorithm |: the latter theory ask|ction between analysis |ty from computability t|estricted resources. In|isely, it tries to clas|ind of problems can, in|lyzing the amount of re|s. In turn, imposing re|s of algorithms and com| More precisely, it tri|kind of problems can, i|m. More precisely, it t|rces is what distinguis| on the available resou| asks a more general qu|olve a problem, whereas|whereas the latter asks|oretical computer scien|estrictions on the avai|unt of resources needed|ms and computational co|er theory asks what kin| theory is that the for|it tries to classify pr|e latter theory asks wh|could be used to solve |ing the amount of resou|inciple, be solved algo|uishes computational co| problems can, in princ|ity theory: the latter |ple, be solved algorith|ropriately restricted r|heory: the latter theor|ailable resources is wh| particular algorithm t|ctions on the available|heoretical computer sci|that can or cannot be s|n or cannot be solved w| to classify problems t|ble resources is what d| of problems can, in pr|are analysis of algorit|al question about all p|nt of resources needed |roblem, whereas the lat|l question about all po| fields in theoretical | solved algorithmically|tween analysis of algor| distinction between an|algorithms that could b|hat can or cannot be so|eeded by a particular a|ely related fields in t| problem. More precisel| what distinguishes com|ed by a particular algo|plexity from computabil|e available resources i|tability theory. A key |eory asks what kind of |e resources is what dis|tinguishes computationa|be used to solve the sa|sely related fields in |available resources is |distinguishes computati|s on the available reso|problem. More precisely|ssible algorithms that |y a particular algorith|n theoretical computer | solve a problem, where|ity from computability | the former is devoted | cannot be solved with |, in principle, be solv|cal computer science ar|ved with appropriately |on about all possible a|blems that can or canno|xity theory is that the|blem. More precisely, i|vailable resources is w|utational complexity fr|fy problems that can or|to solve a problem, whe|annot be solved with ap|cisely, it tries to cla|cience are analysis of |lexity from computabili| a particular algorithm|is devoted to analyzing|from computability theo|d to solve the same pro|heory. A key distinctio|ould be used to solve t| kind of problems can, |the latter theory asks | computer science are a|s that the former is de| about all possible alg|ter theory asks what ki|sis of algorithms and c|tter theory asks what k|distinction between ana|n the available resourc|science are analysis of|oblems that can or cann| possible algorithms th|theoretical computer sc|re analysis of algorith|m to solve a problem, w|e algorithms that could|l computer science are |and computability theor|e solved algorithmicall|on between analysis of |ilable resources is wha|l complexity from compu|more general question a|gorithms and computatio|mer is devoted to analy|at can or cannot be sol|evoted to analyzing the|oblem, whereas the latt|he latter theory asks w|om computability theory|thm to solve a problem,|ble algorithms that cou|g restrictions on the a|s in theoretical comput|what kind of problems c| is that the former is |tional complexity theor|devoted to analyzing th|een analysis of algorit| that can or cannot be |atter theory asks what |ular algorithm to solve|lved with appropriately|ithm to solve a problem|an or cannot be solved |tability theory: the la|algorithm to solve a pr|ify problems that can o|ore general question ab|mputability theory: the|s can, in principle, be|mputability theory. A k|, it tries to classify |Closely related fields |m, whereas the latter a|al complexity theory is|tions on the available |lve a problem, whereas |orithms and computabili|iately restricted resou|e are analysis of algor|ory asks what kind of p|esources is what distin|le resources is what di|he same problem. More p|problem, whereas the la|ve the same problem. Mo|ecisely, it tries to cl| is what distinguishes |ted resources. In turn,|nd computability theory|ssify problems that can|xity from computability|or cannot be solved wit|ability theory. A key d|theory. A key distincti|latter asks a more gene|alysis of algorithms an|rn, imposing restrictio|latter theory asks what|tely restricted resourc|inguishes computational|ed to solve the same pr|mplexity theory is that|nalysis of algorithms a|putability theory. A ke|alyzing the amount of r|ty theory. A key distin|ately restricted resour|sources needed by a par|solve a problem, wherea|rictions on the availab| tries to classify prob|by a particular algorit| theory: the latter the| precisely, it tries to|ly related fields in th|eral question about all|y is that the former is|resources is what disti|ded by a particular alg|utational complexity th|ems can, in principle, |nd of problems can, in |ishes computational com|omputational complexity|ith appropriately restr|rmer is devoted to anal|theory asks what kind o|d to analyzing the amou|ut all possible algorit|eas the latter asks a m|stricted resources. In |rinciple, be solved alg|in theoretical computer|s the latter asks a mor|able resources is what |elds in theoretical com|r is devoted to analyzi|ry: the latter theory a|stion about all possibl|ry. A key distinction b|osing restrictions on t|stinguishes computation|sks a more general ques|hat the former is devot|of algorithms and compu|ossible algorithms that|e the same problem. Mor| algorithms and computa|ible algorithms that co|rithm to solve a proble| with appropriately res|computational complexit|a more general question|thms and computability | that could be used to |ional complexity from c| resources is what dist|me problem. More precis|, be solved algorithmic|d of problems can, in p|analysis of algorithms |gorithms and computabil|s what distinguishes co|neral question about al|thms that could be used|ical computer science a|uestion about all possi|be solved with appropri|s what kind of problems|he latter asks a more g|ies to classify problem|general question about |ithms and computability| are analysis of algori|. In turn, imposing res|rom computability theor|putability theory: the |icted resources. In tur|computer science are an|opriately restricted re|d resources. In turn, i|cannot be solved with a|omputational complexity| devoted to analyzing t|analysis of algorithms | of resources needed by|s computational complex|s to classify problems |f resources needed by a|em, whereas the latter |eory: the latter theory|computability theory. A|he former is devoted to|lds in theoretical comp|s and computational com|ce are analysis of algo|that the former is devo|ore precisely, it tries| amount of resources ne|putational complexity f|eory. A key distinction|nal complexity theory i|ions on the available r|t of resources needed b|ory is that the former |esources needed by a pa| former is devoted to a|t can or cannot be solv|y asks what kind of pro|key distinction between|bility theory: the latt|plexity theory is that | turn, imposing restric|ithms that could be use|ory: the latter theory | the amount of resource| is devoted to analyzin|e latter asks a more ge|on the available resour|nal complexity from com|ems that can or cannot |le, be solved algorithm|re general question abo| algorithm to solve a p| the available resource|the amount of resources|n, imposing restriction|e analysis of algorithm| be solved with appropr|puter science are analy|n between analysis of a|mplexity from computabi|t could be used to solv|sed to solve the same p| whereas the latter ask| same problem. More pre|t be solved with approp|elated fields in theore|iple, be solved algorit|the former is devoted t|orithms that could be u|ly, it tries to classif|resources. In turn, imp|More precisely, it trie|lgorithms and computabi|related fields in theor| more general question |oblems can, in principl|former is devoted to an|stinction between analy| imposing restrictions |ces is what distinguish|not be solved with appr|appropriately restricte| or cannot be solved wi|alysis of algorithms an|hm to solve a problem, |ources is what distingu|r asks a more general q|ms and computability th|ld be used to solve the|s and computability the|gorithms that could be |yzing the amount of res|l complexity theory is |lassify problems that c|istinction between anal|lysis of algorithms and|to solve the same probl|. A key distinction bet|mputational complexity |ms can, in principle, b|lem. More precisely, it|is of algorithms and co|lems that can or cannot| analysis of algorithms|bility theory. A key di| what kind of problems |rithms and computationa|orithms and computation|amount of resources nee|as the latter asks a mo| key distinction betwee|possible algorithms tha|propriately restricted |eded by a particular al| science are analysis o|osely related fields in|out all possible algori|sis of algorithms and c|d computability theory.|A key distinction betwe| needed by a particular|solve the same problem.|y related fields in the|. More precisely, it tr|about all possible algo|solved algorithmically.|what distinguishes comp| theory. A key distinct| analysis of algorithms|he available resources |er science are analysis| problems that can or c|a problem, whereas the |precisely, it tries to |the available resources|heory is that the forme|eory is that the former|ciple, be solved algori|rithms that could be us|and computational compl|ces. In turn, imposing |ey distinction between |, imposing restrictions|asks what kind of probl|computational complexit|ated fields in theoreti|assify problems that ca| problem, whereas the l|algorithms and computat|sible algorithms that c| a problem, whereas the| algorithms that could |re precisely, it tries |er asks a more general |ence are analysis of al|an, in principle, be so|es. In turn, imposing r|ng restrictions on the |nalyzing the amount of |rces needed by a partic|ds in theoretical compu|s is what distinguishes|nction between analysis|lve the same problem. M|ely restricted resource|restrictions on the ava|utability theory: the l|ame problem. More preci| question about all pos|ter science are analysi| computability theory. | be solved algorithmica|ity theory is that the |reas the latter asks a |e a problem, whereas th|ields in theoretical co|ed to analyzing the amo|e same problem. More pr| computational complexi| can, in principle, be |urces is what distingui|computability theory: t|particular algorithm to|roblems that can or can|nguishes computational | could be used to solve|l possible algorithms t|al computer science are|blems can, in principle|omputer science are ana|of resources needed by | general question about|tricted resources. In t|restricted resources. I|inction between analysi|n turn, imposing restri|principle, be solved al|hms that could be used | that the former is dev|ve a problem, whereas t|tional complexity from |sks what kind of proble|all possible algorithms|ion about all possible | restricted resources. |ithms and computational|onal complexity from co| theory asks what kind |n about all possible al|s devoted to analyzing |lable resources is what|ry is that the former i|to analyzing the amount|ly restricted resources|omplexity from computab|problems that can or ca|e solved with appropria|s that can or cannot be|is that the former is d| appropriately restrict|utability theory. A key| used to solve the same| available resources is|ns on the available res|zing the amount of reso|ictions on the availabl|ount of resources neede|t tries to classify pro|h appropriately restric|atter asks a more gener|y. A key distinction be|articular algorithm to |thms and computational |al complexity from comp|t the former is devoted|priately restricted res|asks a more general que|ry asks what kind of pr|nd computational comple|d fields in theoretical|ysis of algorithms and |oblem. More precisely, |guishes computational c|ng the amount of resour|etween analysis of algo|recisely, it tries to c| latter theory asks wha|olved with appropriatel|tion about all possible|o classify problems tha| theoretical computer s|o analyzing the amount | to analyzing the amoun|er is devoted to analyz|tinction between analys|lgorithms and computati|at kind of problems can|can or cannot be solved|y restricted resources.|theory is that the form|hat kind of problems ca|icular algorithm to sol|y theory is that the fo| analyzing the amount o|en analysis of algorith| classify problems that|t kind of problems can,|o solve the same proble| related fields in theo|lem, whereas the latter|mputational complexity |tical computer science |can, in principle, be s|mputer science are anal|sources is what disting|ween analysis of algori| A key distinction betw|m computability theory:|ability theory: the lat|oted to analyzing the a|r science are analysis | restrictions on the av|used to solve the same |urces. In turn, imposin|with appropriately rest| complexity theory is t| of algorithms and comp|needed by a particular |lated fields in theoret|posing restrictions on |istinguishes computatio|ms that can or cannot b|imposing restrictions o|hes computational compl|etical computer science|ormer is devoted to ana|rithms and computabilit| from computability the|sing restrictions on th|e general question abou|hms and computational c| computability theory: |at could be used to sol|hat could be used to so|onal complexity theory |ience are analysis of a|tion between analysis o|algorithms and computab| algorithms and computa|solved with appropriate| and computability theo|ility theory. A key dis|ility theory: the latte|hereas the latter asks | to solve the same prob|esources. In turn, impo|s needed by a particula|In turn, imposing restr|e amount of resources n|classify problems that |turn, imposing restrict|estion about all possib|urces needed by a parti|trictions on the availa|sify problems that can |ks what kind of problem|f algorithms and comput|y theory: the latter th|tational complexity fro|orithm to solve a probl|ed resources. In turn, |same problem. More prec|o solve a problem, wher|he amount of resources |eoretical computer scie|e used to solve the sam|lexity theory is that t|nnot be solved with app|question about all poss|that could be used to s|omplexity theory is tha|r cannot be solved with| in theoretical compute|at distinguishes comput|sources. In turn, impos|y theory. A key distinc|es computational comple| all possible algorithm|ity theory. A key disti|blem, whereas the latte| solved with appropriat|complexity from computa|ely, it tries to classi|be solved algorithmical| In turn, imposing rest|d be used to solve the |s a more general questi|at the former is devote|g the amount of resourc| solve the same problem|s of algorithms and com|rces. In turn, imposing|losely related fields i|e, be solved algorithmi|between analysis of alg|em. More precisely, it | resources needed by a |ted fields in theoretic|tries to classify probl| by a particular algori|ational complexity from|ries to classify proble|lgorithms that could be| can or cannot be solve|, whereas the latter as|cted resources. In turn|es is what distinguishe|es needed by a particul|uld be used to solve th|lysis of algorithms and|urn, imposing restricti|shes computational comp|ted to analyzing the am|t all possible algorith|ational complexity theo|r theory asks what kind|gorithm to solve a prob|exity theory is that th| the latter asks a more|lgorithm to solve a pro| in principle, be solve| it tries to classify p|hms and computability t|retical computer scienc|roblems can, in princip|ter asks a more general|theory: the latter theo|y from computability th|ppropriately restricted|ed fields in theoretica|es to classify problems|ed with appropriately r|ources needed by a part| complexity from comput|riately restricted reso|y problems that can or |ysis of algorithms and |e precisely, it tries t|y: the latter theory as|mount of resources need|ources. In turn, imposi|n analysis of algorithm|complexity theory is th|lity theory. A key dist|mposing restrictions on|resources needed by a p|ons on the available re|nciple, be solved algor|tational complexity the|ion between analysis of|cular algorithm to solv|tter asks a more genera|problems can, in princi|ms that could be used t|s that could be used to|y, it tries to classify|y distinction between a|of problems can, in pri| principle, be solved a|ory. A key distinction |ot be solved with appro|lity theory: the latter|nalysis of algorithms a| a more general questio| to solve a problem, wh|f problems can, in prin|voted to analyzing the |heory asks what kind of|olve the same problem. |ional complexity theory| be used to solve the s| distinguishes computat|ll possible algorithms |to classify problems th|hat distinguishes compu|strictions on the avail|is what distinguishes c|ty theory: the latter t|uter science are analys|lar algorithm to solve |the same problem. More | asks what kind of prob|lems can, in principle,|d with appropriately re| computational complexi|sely, it tries to class|putational complexity t|analyzing the amount of| the latter theory asks|ricted resources. In tu|rticular algorithm to s|n, in principle, be sol|ar algorithm to solve a| between analysis of al|ks a more general quest|f algorithms and comput|e former is devoted to |r algorithm to solve a |ces needed by a particu|ticular algorithm to so|in principle, be solved|ing restrictions on the| of algorithms and comp|d by a particular algor|bout all possible algor|ral question about all |fields in theoretical c| resources. In turn, im| latter asks a more gen|ty theory is that the f|omputability theory: th|roblem. More precisely,| and computational comp|th appropriately restri| the same problem. More|t distinguishes computa|
|elling, s|deals wit|odiversit|xamples o|lling, sp|chness ma|a, such a|pecies ri|is of bio|ng, speci|cation to|r microbi|versity i|ecies ide|ses, or m|s of biod| such as |ata, such|entificat|f such an|h analyse|ection an|, or spec|or microb|, or micr|ome data.|. Example| identifi|h as taxo|etics, ni|de phylog|iversity |sity info| collecti|d analysi|dentifica|ss mappin|g, or spe| richness|lude phyl|odiversit| database|netics, n| include | mapping,|lection a|s taxonom|tion tool|, such as|iche mode|ta. Examp|abases, o|formatics|e modelli|biome dat| and anal|phylogene|taxonomic|iversity |axonomic |cies rich|ity infor|r species|mples of |as taxono|ling, spe|rsity dat|nomic dat| such ana|nformatic| species |ch as tax|ollection|ersity da|tion and |clude phy|, species|identific|yses incl|es includ|mic datab|on tools.| taxonomi| with the| as taxon|n and ana|onomic da|e data. E|analyses |ntificati|ata. Exam|lyses inc|ation too|ichness m|ta, such |s, or mic|omic data|modelling|robiome d|data, suc| biodiver| deals wi|pping, or|me data. |richness |f biodive|cs, niche|on and an| of biodi|lysis of |ormatics |s with th|mapping, |ies richn|les of su|xonomic d|ification|y informa| species |versity d|of biodiv|ies ident|enetics, | Examples|h the col| the coll|crobiome |ith the c|ic databa|rsity inf|ty data, |iome data|ecies ric| or micro|ases, or |iodiversi|species r|ples of s|with the |ng, or sp|s identif|include p|apping, o|ty inform|ics deals|s include|diversity|or specie|atics dea|sis of bi|a. Exampl|alyses in|ogenetics|ness mapp|ion tools|Examples |he collec|data. Exa|g, specie|tics, nic| modellin|ity data,|llection |nalysis o| informat|es richne|diversity|ylogeneti|he modell|eals with|biodivers|tics deal| of such |ing, or s|es of suc|tabases, |the colle|ction and|als with |collectio|ls with t| phylogen|uch analy|ch analys|ess mappi|tificatio|e phyloge|hness map|alysis of|ication t|and analy| analyses|analysis | data, su|species i| data. Ex|s mapping|che model|fication |of such a|ping, or |ion and a|ersity in|c databas|icrobiome|logenetic|rmatics d|es identi| analysis|ics, nich|nclude ph|such anal|genetics,|atabases,|bases, or|such as t|databases|s of such|ses inclu|s deals w| microbio|cs deals |uch as ta|y data, s| or speci|es, or mi|iodiversi| niche mo|microbiom|delling, |ing, spec|nd analys|ude phylo|matics de|nalyses i|ysis of b|amples of|s richnes|odelling,|sity data|, niche m|e collect|obiome da|cies iden|th the co|informati|Biodivers|pecies id|s, niche |hylogenet|niche mod|
|rmation processes i| study of physical |rmatics in 1970 to |try (the study of c|eweg and Ben Hesper|ocesses in biologic|udy of chemical pro|ation processes in |ics (the study of p|formation processes|ms) or biochemistry|(the study of chemi|definition placed b|stry (the study of |ological systems) o|informatics in 1970|ed bioinformatics a|] This definition p|bioinformatics as a|ogeweg and Ben Hesp|of chemical process|fer to the study of| to the study of in| processes in bioti|nformatics as a fie|nition placed bioin|o refer to the stud| 1970 to refer to t|y of chemical proce|aulien Hogeweg and |l systems) or bioch|mation processes in| (the study of phys|rallel to biophysic|parallel to biophys|ological systems).[|emical processes in|cesses in biotic sy|the term bioinforma|970 to refer to the|y of information pr|biophysics (the stu|processes in biolog|[3] This definition| refer to the study|aced bioinformatics|f information proce|es in biological sy|ysical processes in|ical processes in b| the study of infor| Ben Hesper coined | (the study of chem| field parallel to |cs as a field paral|ned the term bioinf|to the study of inf|ms.[1][2][3] This d|r biochemistry (the| and Ben Hesper coi|ocesses in biologic|coined the term bio|rocesses in biotic |rm bioinformatics i|c systems.[1][2][3]|d bioinformatics as| physical processes|rocesses in biologi|udy of physical pro|e study of chemical| study of informati|sper coined the ter|ses in biotic syste|sics (the study of |ry (the study of ch|oinformatics in 197|This definition pla|sses in biological |nformatics in 1970 |0 to refer to the s|ioinformatics as a |cal processes in bi|eg and Ben Hesper c|g and Ben Hesper co|is definition place| term bioinformatic|lien Hogeweg and Be|iological systems).|ioinformatics in 19| in biological syst|logical systems) or|n biological system|ced bioinformatics |ogical systems) or |refer to the study |ses in biological s| processes in biolo|rmatics as a field |r coined the term b|ogical systems).[1]|er to the study of |e term bioinformati| biological systems|cs in 1970 to refer|the study of inform|s definition placed|d the term bioinfor|on processes in bio|) or biochemistry (|Hogeweg and Ben Hes|processes in biotic|ems) or biochemistr|he study of chemica|s a field parallel |tics in 1970 to ref|in biological syste| biochemistry (the |informatics as a fi|ield parallel to bi|and Ben Hesper coin|en Hesper coined th|ystems) or biochemi|biotic systems.[1][|hemistry (the study|n biological system| bioinformatics as |[1][2][3] This defi|][2][3] This defini|cesses in biologica|biological systems)|.[1][2][3] This def|n Hogeweg and Ben H|on placed bioinform|chemistry (the stud|stems.[1][2][3] Thi|n Hesper coined the| This definition pl|to refer to the stu|tudy of information|mistry (the study o|tudy of chemical pr|l to biophysics (th|s in biological sys|d parallel to bioph|s (the study of phy|r to the study of i|es in biotic system|ics as a field para|es in biological sy|in biotic systems.[|allel to biophysics|hemical processes i|emistry (the study |en Hogeweg and Ben |sses in biological | the term bioinform|y (the study of che|physics (the study |iological systems) |Ben Hesper coined t|tudy of physical pr|to biophysics (the |tems.[1][2][3] This|formatics in 1970 t|d Ben Hesper coined| placed bioinformat|dy of physical proc|nd Ben Hesper coine|finition placed bio|ical processes in b|geweg and Ben Hespe|logical systems).[1|ld parallel to biop|ochemistry (the stu|70 to refer to the | parallel to biophy|erm bioinformatics |ormatics as a field|iotic systems.[1][2|sical processes in |e study of physical| study of chemical |study of physical p|udy of information |o the study of info|al processes in bio| definition placed | of information pro|cs (the study of ph|information process|matics in 1970 to r|2][3] This definiti|s) or biochemistry |n 1970 to refer to |ophysics (the study|ulien Hogeweg and B|ien Hogeweg and Ben| to refer to the st|ystems.[1][2][3] Th|n processes in biot|istry (the study of| biotic systems.[1]|f physical processe|per coined the term|ed the term bioinfo|Paulien Hogeweg and|the study of chemic|er coined the term |s in 1970 to refer |study of informatio|as a field parallel|ocesses in biotic s|ems.[1][2][3] This |][3] This definitio| information proces|esses in biotic sys|tic systems.[1][2][|otic systems.[1][2]|esper coined the te|s in biotic systems|o biophysics (the s|gical systems) or b| biophysics (the st|lel to biophysics (| biological systems|matics as a field p|f chemical processe|ic systems.[1][2][3|1970 to refer to th|inition placed bioi|al systems) or bioc|he study of informa|tics as a field par| in biological syst|physical processes |esses in biological|arallel to biophysi|esses in biological| to biophysics (the| of physical proces|dy of information p|of physical process|ical systems) or bi| coined the term bi|in biological syste|nformation processe|iophysics (the stud|n placed bioinforma|[2][3] This definit|eld parallel to bio|oined the term bioi| in biotic systems.|e study of informat|dy of chemical proc|iochemistry (the st|systems.[1][2][3] T|processes in biolog| in 1970 to refer t|ition placed bioinf|ion processes in bi|rocesses in biologi|s.[1][2][3] This de|s in biological sys|l processes in biol|or biochemistry (th|l processes in biol|cesses in biologica|he study of physica| systems) or bioche| a field parallel t|a field parallel to|Hesper coined the t|efinition placed bi|y of physical proce|term bioinformatics|al processes in bio|ormation processes | bioinformatics in |3] This definition |efer to the study o|llel to biophysics | processes in biolo|in 1970 to refer to|the study of physic|el to biophysics (t|tion placed bioinfo|ses in biological s|bioinformatics in 1|s as a field parall| of chemical proces|field parallel to b|atics in 1970 to re|(the study of physi|oinformatics as a f|biological systems)| Hesper coined the |cal systems) or bio| chemical processes|cal processes in bi|tion processes in b|ysics (the study of| Hogeweg and Ben He|formatics as a fiel|weg and Ben Hesper |placed bioinformati|stems) or biochemis|tems) or biochemist|m bioinformatics in|hysical processes i|laced bioinformatic|his definition plac|ion placed bioinfor|n biotic systems.[1|1][2][3] This defin|mical processes in |ormatics in 1970 to|chemical processes |systems) or biochem| as a field paralle|hysics (the study o|ics in 1970 to refe| or biochemistry (t|of information proc|ined the term bioin|biochemistry (the s|sses in biotic syst| systems.[1][2][3] |atics as a field pa|he term bioinformat|study of chemical p|
|tract, non|t the same|not the ex|the exact |which othe|ral ways t|many edges|isual stru|with the g|ructure th|problem do|re connect|nfused wit|ter suited|er suited |f (the abs|wings repr|cted to wh|e) as ther| problem d|he problem|yout. In p|to decide |here are s|raph drawi|e confused|ecide if t| is often |pending on|e if two d|ual struct|cult to de|l that mat|aph drawin|tters is w|s to struc|ayouts may|by how man|rtices are|better sui| ways to s| abstract,|cture) as |uited and | practice | layout. I|xact layou| itself (t|layout. In| should no|hers by ho|uts may be|is which v|e graph it|everal way|tand than |graph draw| easier to|h itself (|g. All tha|e abstract|h others b| the graph|ier to und|nderstand |ed to whic|In practic|ected to w|several wa|s may be b|sier to un| are conne| the probl| the same | may be be|ch vertice|ph. Depend|ayout. In |o structur|difficult | vertices | and not t|t to decid|ult to dec|s and not |onfused wi|cide if tw|ph itself |ide if two|roblem dom|uld not be|t is often|ructure) a|practice i|e are seve|it is ofte|he graph d|tructure) |ow many ed| (the abst|same graph|any edges | to unders|ten diffic|gs represe|ain some l|nt the sam|that matte| confused |ding on th|present th|hat matter|structure)|atters is | to struct|e graph dr|ut. In pra|domain som|g should n|graph draw|act, non-v|, non-visu|used with | edges and|e same gra|Depending |h vertices|e better s|the same g|self (the |. All that|ed and eas|ich others|s are conn|nd easier |ing. All t|s which ve| structure|ract, non-|dges and n| Depending| not the e|ny edges a| and easie|d and easi|ng. All th|ng on the |exact layo|ges and no|ters is wh|main some |raph drawi|awing shou| as there |r suited a|there are |two drawin|ts may be |. Dependin|n some lay|ure) as th|ot be conf|l structur|onnected t|ent the sa|es and not|ited and e|al structu|tself (the|ct layout.|t the exac|o understa| drawing s|fficult to|esent the |re several| the exact|and easier|stract, no|thers by h| drawings |raph. Depe|to underst|wing shoul|graph. Dep|bstract, n|drawing. A|drawings r|s is which|nd than ot|y be bette|re) as the| drawing. |resent the|some layou|erstand th| matters i| is which |de if two |nding on t|may be bet|h drawing.| which ver| to decide|re are sev|ch others |ften diffi|h the grap|visual str| are sever|ted and ea| that matt|. In pract| suited an|ways to st|sual struc|t, non-vis|be better |aph itself|n difficul| All that |ractice it|hich verti|to which o|ucture) as|ld not be |raph itsel| others by|n the prob|epresent t|h drawing |suited and|ll that ma|omain some|s by how m|ture the g|r to under| many edge|ing on the| graph dra|d to which|e layouts |connected |d than oth|n practice|e the grap|ings repre|rs by how |t layout. |rawing. Al|ces are co| be confus|ith the gr|ers by how| be better|ers is whi|decide if |if two dra|ucture the|tices are |fused with|ctice it i|how many e|rstand tha|-visual st|edges and |ifficult t|w many edg| the graph|h. Dependi|youts may | not be co|o which ot|awings rep|the proble| two drawi|es are con|ted to whi| it is oft|wo drawing|e problem |drawing sh|hich other|me graph. |often diff|epending o|ph drawing|he exact l|ome layout|ys to stru| which oth|ay be bett|the graph |structure |etter suit| decide if|en difficu| difficult| some layo|sent the s|eral ways |ngs repres|rs is whic| exact lay|on the pro|asier to u| graph. De|ture) as t|as there a| graph its|ct, non-vi|A graph dr|ot the exa|ould not b|than other|are severa|represent |ere are se|s there ar|e connecte|which vert|ice it is |stand than|in some la| connected| several w|at matters|graph itse|l ways to |s represen|matters is|t be confu|t matters |ich vertic|non-visual|al ways to|y edges an|an others.|nd not the|ame graph.|blem domai|(the abstr|f two draw|lem domain|ending on |aph. Depen|d easier t|y how many|and than o|d not be c|ices are c|g on the p|to structu|actice it | than othe|rawings re|act layout|nnected to|confused w|ph drawing|awing. All| by how ma|ure the gr|All that m|outs may b|han others|nected to |ertices ar| there are| layouts m|em domain |e it is of|sed with t|n-visual s|ed with th|oblem doma| non-visua|are connec|be confuse|and not th|rawing sho|itself (th|should not|d with the|he same gr|derstand t| structure|the graph | In practi|veral ways| if two dr|he graph i|he abstrac|tter suite|s often di|re the gra|lf (the ab|e exact la| with the |icult to d|aph drawin| to which |o decide i|vertices a|ficult to |me layouts|elf (the a|cture the |ays to str|o drawings|d not the | better su|) as there|ce it is o| often dif|is often d| domain so|abstract, | graph dra|e several |on-visual |ing should|layouts ma|e graph. D| same grap|others by | understan| how many |understand|lt to deci|the abstra|ng should |hould not |er to unde|tice it is|out. In pr|wing. All | on the pr|th the gra|t. In prac| represent|easier to |tructure t|not be con|m domain s|
|corresponding to |ng to the edges o|ter collecting te|at monomial. In t|resents a spannin|the graph simply |can obtain explic|s and performing |ply by computing |simply by computi|g the determinant|s of the graph si|performing all po|ts a spanning tre|al. In this way, |s appearing in th| performing all p| tree consisting |dges correspondin|xpression represe|nding to the edge|ancellations, eac|this way, one can|mial. In this way|eterminants corre|orresponding to t|h monomial in the|in the resulting |ding to the edges|e cancellations, |he edges correspo| monomial. In thi|s way, one can ob|corresponding to |aring in that mon|orming all possib|numeration of all|ning tree consist|ssible cancellati|nomial (the Kirch|f the graph. Afte|ession represents|a homogeneous pol|e graph simply by|omogeneous polyno|sting of the edge|f the edges corre| consisting of th|ff polynomial) in| spanning tree co|ollecting terms a|ain explicit enum|in the indetermin|the edges of the |ting the determin|ellations, each m|all the spanning | After collecting|n this way, one c|imply by computin|neous polynomial | Kirchhoff polyno|the Kirchhoff pol|hoff polynomial) |nsisting of the e|l) in the indeter|e can obtain expl|al in the resulti|ing to the indete|indeterminants ap|plicit enumeratio|ing all possible |Kirchhoff polynom|one can obtain ex|ing the determina| the indeterminan| that monomial. I|onomial in the re| to the indetermi|nts a spanning tr|eous polynomial (| collecting terms| the graph. After|rresponding to th|in that monomial.|rminants appearin|ring in that mono|ssion represents | indeterminants c|hen a homogeneous|e spanning trees |l. In this way, o|g terms and perfo|ee consisting of |lations, each mon|he Kirchhoff poly|nts appearing in | the edges corres|ch monomial in th|ns, each monomial|chhoff polynomial|ting of the edges|mial) in the inde|determinants corr| by computing the|ynomial) in the i|eterminants appea|erminants corresp| possible cancell| the indeterminan|ning trees of the|on represents a s|n the resulting e|g trees of the gr|omial (the Kirchh|omial. In this wa|collecting terms |esponding to the |ng all possible c|his way, one can |aph simply by com|ng tree consistin|onding to the edg|of the graph. Aft|omial in the resu|obtain explicit e|ossible cancellat|s corresponding t|sisting of the ed|ree consisting of|indeterminants co| is then a homoge|onsisting of the |rees of the graph|xplicit enumerati|that monomial. In|to the edges of t|a spanning tree c|, one can obtain |isting of the edg| of all the spann| this way, one ca|ing tree consisti|by computing the |nning trees of th|s of the graph. A|g to the indeterm|way, one can obta|hat monomial. In |n represents a sp|g to the edges of|polynomial (the K|ay, one can obtai| of the graph. Af|expression repres|represents a span|meration of all t|geneous polynomia| and performing a|the spanning tree| the determinant.| of the graph sim|olynomial) in the|ogeneous polynomi|appearing in that|raph simply by co|enumeration of al|e indeterminants |possible cancella|er collecting ter|edges of the grap|ng to the indeter|mogeneous polynom|omputing the dete| graph. After col|resulting express|terms and perform|responding to the|e is then a homog|h. After collecti|and performing al| polynomial) in t|ll the spanning t|o the indetermina|s then a homogene|determinant above|sponding to the e| graph simply by |rchhoff polynomia|(the Kirchhoff po|ing of the edges |cting terms and p|ach monomial in t|to the indetermin|the indeterminant|llecting terms an|inants correspond|panning tree cons|anning trees of t| in the resulting|ponding to the ed|ation of all the |ial in the result|ndeterminants cor|esents a spanning|trees of the grap|ing to the edges |al (the Kirchhoff|graph simply by c|anning tree consi| represents a spa|l in the resultin|y computing the d|e edges of the gr|on of all the spa|erforming all pos|g expression repr|nant above is the|e determinant abo|ll possible cance|ms and performing|l possible cancel| explicit enumera|of the edges corr|es of the graph s| (the Kirchhoff p|cancellations, ea|ng expression rep|earing in that mo|ions, each monomi|ppearing in that |is then a homogen|ve is then a homo|al) in the indete|ulting expression|btain explicit en|ons, each monomia|ne can obtain exp| spanning trees o|mial in the resul|nomial. In this w|ndeterminants app|each monomial in |ing expression re|consisting of the|rms and performin|n of all the span|ants correspondin|umeration of all |nants correspondi|above is then a h|e indeterminants | a homogeneous po|pression represen|l (the Kirchhoff |raph. After colle|ncellations, each|t monomial. In th|it enumeration of|ynomial (the Kirc|rforming all poss| determinant abov|an obtain explici| a spanning tree |nding to the inde|monomial in the r| the resulting ex|erms and performi|ing terms and per|ial) in the indet| edges correspond|s corresponding t|ng the determinan|f the graph simpl|rminant above is |ts corresponding |n that monomial. |ges corresponding|ial. In this way,|erminants appeari|olynomial (the Ki|panning trees of |nts corresponding|licit enumeration|he resulting expr|g in that monomia|g of the edges co|terminant above i|ming all possible|ly by computing t|in explicit enume|ponding to the in|eterminant above | edges of the gra| the spanning tre|lting expression |e consisting of t|onding to the ind| corresponding to|sulting expressio|spanning trees of|lynomial (the Kir| one can obtain e|ng of the edges c| way, one can obt|le cancellations,| simply by comput|ble cancellations| then a homogeneo|l the spanning tr|n obtain explicit|mial (the Kirchho|ding to the indet|fter collecting t|g tree consisting|ression represent|cit enumeration o|es corresponding |ous polynomial (t|minants appearing|terminants corres|n explicit enumer|sents a spanning |the graph. After |lynomial) in the |ion of all the sp|n the indetermina|of all the spanni|minants correspon| above is then a |homogeneous polyn|eration of all th|explicit enumerat|ph simply by comp|tain explicit enu|n a homogeneous p|tree consisting o|mply by computing| of the edges cor|presents a spanni|rresponding to th|) in the indeterm|t above is then a|ng in that monomi|sion represents a| to the edges of |ing in that monom|ting terms and pe|nomial) in the in|rminants correspo|tions, each monom|ion represents a |dges of the graph| expression repre|omial) in the ind|pearing in that m| computing the de|uting the determi|After collecting |In this way, one |bove is then a ho|icit enumeration |ts appearing in t|epresents a spann|ants appearing in|rming all possibl|s polynomial (the|esulting expressi|o the edges of th|lecting terms and|ph. After collect|is way, one can o|s, each monomial | enumeration of a|responding to the|f polynomial) in |the indeterminant|nomial in the res|nd performing all|tion of all the s|the resulting exp|nning tree consis|erminant above is|ove is then a hom|t enumeration of | the edges of the|ant above is then|y, one can obtain|e edges correspon|onomial. In this |ents a spanning t| homogeneous poly|terminants appear|monomial. In this|, each monomial i|e Kirchhoff polyn| each monomial in|he indeterminants| corresponding to|nt above is then | indeterminants a| monomial in the |inant above is th|graph. After coll|en a homogeneous |orresponding to t|cellations, each |hhoff polynomial)| all possible can|r collecting term|the edges corresp| obtain explicit |ges of the graph.|d performing all |polynomial) in th|. After collectin|he indeterminants|he graph simply b|off polynomial) i|he graph. After c|all possible canc|mputing the deter|aph. After collec|y by computing th|sponding to the i|ting expression r|ecting terms and | in the indetermi| terms and perfor|f all the spannin|forming all possi|computing the det|puting the determ|sible cancellatio| in that monomial| can obtain expli|us polynomial (th|e graph. After co|ng terms and perf|of the graph simp|llations, each mo|. In this way, on|es of the graph. | In this way, one|ible cancellation|eneous polynomial|e resulting expre|ees of the graph |ng trees of the g| all the spanning|spanning tree con|he edges of the g|g all possible ca|nants appearing i|edges correspondi| appearing in tha|he determinant ab| polynomial (the |ration of all the|inants appearing |then a homogeneou|s a spanning tree|h simply by compu|ations, each mono|he spanning trees|ing trees of the | cancellations, e|irchhoff polynomi|esponding to the | resulting expres| trees of the gra|minant above is t|ial (the Kirchhof|determinants appe| the graph simply|The determinant a|
| solve these |me required t|own. That is,|ing whether o|rincipal unso|sus NP proble|incipal unsol|ocate a solut|these problem|uickly, calle|nce, determin|nsolved probl| size of the | P versus NP |te a solution|rified quickl| solution in | polynomial t|ems in comput|is possible t|on in the fir|e most notabl|stic of NP-co|cate a soluti|st solution t|onsequence, d|m increases v|s one of the |er or not it |e; indeed, th| first place;|place; indeed|in polynomial|ning whether |orithm increa|ther or not i|s is that no |e problem can|y (in polynom|able characte|he size of th| solve the pr|ve these prob|blem, is one |roblem can be|cteristic of |urrently know|any currently|P-complete pr|P versus NP p|oblems in com|cipal unsolve|ickly (in pol| NP problem, | As a consequ|ere is no kno|he most notab|oblem, is one|e problem usi|n polynomial |oblem using a|o them is kno| science toda|ution in the |solve these p|cience today.| of the probl|is, the time | is possible |, there is no|mputer scienc|problem, is o|er science to| characterist| to them is k|led the P ver|plete problem|e a solution |That is, the |very quickly | problems is |solution in t|required to s|f the problem|rst place; in|is that no fa|of NP-complet|n computer sc|ows. As a con|known algorit|o known effic|tion in the f|tly known alg|ncipal unsolv|he P versus N|ved problems |ugh any given| an NP-comple|e required to| one of the p|me), there is|st place; ind|em can be ver|rmining wheth|n solution to|lved problems|istic of NP-c|ny currently |kly, called t|ime required |ce, determini|blems is that|n algorithm i|versus NP pro|NP-complete p|complete prob|us NP problem|al time), the| is one of th|on to them is|olve the prob| solution to |an be verifie|he principal |plete problem|nsequence, de|hat no fast s|mining whethe| or not it is|s that no fas|f NP-complete|icient way to|nown. That is|ficient way t| computer sci| the problem |science today|m grows. As a|nown algorith|is one of the|puter science| indeed, the |own algorithm|em using any |polynomial ti|way to locate|quired to sol|e to solve th|ost notable c|ay to locate |locate a solu|ristic of NP-|se problems q|n to them is |ems quickly, |s, the time r|t is, the tim|(in polynomia|he time requi|d quickly (in|lve the probl| fast solutio| to solve the|rows. As a co| time require|whether or no|roblem using |o an NP-compl|, is one of t|ly as the siz|g whether or | quickly, cal|As a conseque|acteristic of| most notable|uence, determ|mial time), t|ven solution |. As a conseq|ms in compute|increases ver|ithm increase|ining whether| the problem |sible to solv|gh any given |rithm increas|given solutio|is no known e| known. That |re is no know|ly (in polyno|though any gi|ate a solutio|; indeed, the|ible to solve|ese problems |lled the P ve|not it is pos| efficient wa| a consequenc|to them is kn|of the princi|racteristic o|problem grows|size of the p|lem using any|ermining whet| known algori|solution to a|verified quic| (in polynomi| be verified |problems in c|ncreases very|time required|any given sol|ve the proble|lem can be ve|d problems in|ic of NP-comp| the P versus|lem, is one o| NP-complete |termining whe|en solution t|y known algor|ng any curren|blems in comp|ickly as the | any given so|ete problem c| the principa|n in the firs|the problem g|r science tod| quickly as t|ipal unsolved|r not it is p|nomial time),|here is no kn|there is no k| no known eff|ial time), th|c of NP-compl|ed problems i| the size of |n to an NP-co| very quickly|tion to an NP|d to solve th|m can be veri|he first plac| in the first|first place; |s a consequen| is known. Th|e time requir|, called the |gorithm incre|blems quickly| a solution i|s NP problem,|the P versus |r or not it i|y given solut|ter science t|s. As a conse| whether or n|wn. That is, |ble character|ed the P vers|ossible to so| it is possib|reases very q| quickly (in | solution to | can be verif|e problems qu|ze of the pro|ntly known al|ry quickly as|em is known. |lynomial time|problems quic| given soluti|lution in the| the most not|solved proble|omplete probl|y currently k|e characteris|olution to th| time), there|grows. As a c|e verified qu|roblems is th|lve these pro|ion in the fi| them is know|e of the prob| unsolved pro|pal unsolved |mplete proble|complete prob|hem is known.|no known effi|iven solution|ed to solve t|s very quickl|as the size o| verified qui|te problems i|deed, the mos|NP-complete p|the first pla|omial time), |olynomial tim|l unsolved pr|fast solution|teristic of N|quickly, call|solution to t|le characteri| algorithm in|y to locate a|, the time re|ed, the most |ize of the pr|l time), ther|lution to the|d the P versu|efficient way| problem, is |be verified q|o solve the p|hat is, the t|using any cur|kly (in polyn|wn algorithm |eases very qu|ence, determi|ynomial time)|it is possibl|roblem grows.|t solution to| problems in |blem can be v|possible to s|haracteristic|ly known algo|ickly, called|the problem u|P problem, is|y quickly as |ms quickly, c| possible to |ng whether or|or not it is |ion to an NP-| to locate a |-complete pro|t no fast sol|problems is t| principal un|ient way to l|ckly, called |sequence, det|P-complete pr|blem grows. A|consequence, | called the P|ases very qui|ws. As a cons|lace; indeed,|ssible to sol|problem can b|o locate a so|that no fast | That is, the|them is known|determining w|e, determinin|time), there |s the size of|aracteristic |of the proble|solve the pro|e), there is |he problem us|fficient way |lgorithm incr|y, called the|e of the prin|nt way to loc|e the problem|lete problems| in computer |etermining wh|oblem can be |own efficient|in the first |ently known a|e first place| is that no f|e P versus NP| grows. As a |ed quickly (i|ing any curre|ace; indeed, |oblem grows. |o solve these|lems in compu|s possible to|ckly as the s|ndeed, the mo|otable charac|em, is one of|the principal|hese problems|oblems quickl|s quickly, ca|ution to an N|ired to solve|a consequence| increases ve|olve these pr|m using any c| problem grow| versus NP pr| of the princ|rently known |al unsolved p|e problems is| place; indee|ce; indeed, t|currently kno|d, the most n|hough any giv|uter science |indeed, the m| to an NP-com|thm increases|no fast solut|problem using|ution to them|ast solution |hm increases |), there is n|m is known. T| the time req|irst place; i|h any given s|table charact|he problem gr|st notable ch|quickly as th|, the most no|can be verifi|alled the P v| the first pl| is no known |e problem gro|ion to them i|hether or not|erified quick|ckly (in poly|s in computer|cient way to |. That is, th|e is no known|t place; inde|uickly as the| currently kn|e size of the|characteristi|principal uns|equence, dete|on to an NP-c|n be verified|ough any give|n efficient w| using any cu|to solve the | not it is po|em grows. As |ery quickly a|t is possible|ny given solu|ether or not |rrently known|ified quickly|ne of the pri|wn efficient |le to solve t|roblem, is on| problems qui| known effici|one of the pr| determining |at no fast so| these proble|nown efficien|olution in th|tic of NP-com|quence, deter|to solve thes| that no fast| problem usin|ly, called th|t notable cha|ete problems |lete problem | required to |algorithm inc| there is no |ble to solve |roblems in co| notable char|unsolved prob|her or not it|lems is that |uickly (in po|to locate a s|ied quickly (|uired to solv|an NP-complet|notable chara| consequence,| locate a sol|sing any curr|the time requ|s no known ef| to solve the|y as the size|, determining|mplete proble|NP problem, i|most notable |m, is one of | as the size |quickly (in p|rsus NP probl|in computer s|eed, the most|the most nota|s known. That| of NP-comple|eristic of NP|creases very |roblems quick|at is, the ti|the size of t|kly as the si|lthough any g|to an NP-comp| problem can |e principal u| NP-complete |known efficie|known. That i|e these probl|lem grows. As|tion to them |ime), there i|omplete probl|ms is that no|ses very quic|ent way to lo|n the first p|te problem ca|lution to an |Although any |n NP-complete| any currentl| way to locat|o fast soluti|ems is that n|omputer scien|oblems is tha|ersus NP prob|-complete pro|called the P |t way to loca|t it is possi|f the princip| is, the time|is known. Tha|blem using an|red to solve |es very quick|n. That is, t|olved problem|equired to so|lems quickly,|ot it is poss| no fast solu|g any current|olution to an|a solution in|fied quickly |computer scie|
|ibe complex c| some dispute|or not the la|r or not the |exes are trea|hods that emp|o describe co|sufficient to|ed by classic|complexes are|ical approxim|ribe complex |um mechanical|fficient to d| are treated |lexes are tre|plexes are tr| semi-empiric|chanics metho|M), and the r|e treated by |d the remaind|olecules are |treated quant|be complex ch|roximately (M|employ what a|oximately (MM|lled molecula|QM), and the |s are treated|treated appro|al approximat|ll portions o|ules can be s|lex chemical | as those in | methods are |hanics. In QM|cal mechanics|y semi-empiri|QM/MM methods|s. Even large|are treated q| (QM), and th| methods that|es are treate| mechanics. I| QM/MM method|icient to des|ate methods. |anics methods|describe comp|mploy what ar|the latter me|ds that emplo|lassical mech|ular mechanic|er molecules |an be studied|(QM), and the|ethods that e| describe com| such as thos| employ what |studied by se|cal reactions|ch as those i|cally (QM), a|eated by clas|ry. Large mol|echanics. In |nd the remain|emistry. Larg|ecules are tr|mechanics. In|anically (QM)|hanically (QM|eld whether o| approximate |uantum mechan|portions of l|r not the lat|thods, small |the field whe|ge complexes | dispute with|hin the field|ot the latter|MM methods, s| can be studi|ortions of la|are called mo|ated quantum |ield whether |whether or no|spute within |sical mechani|s are treated|rge molecules| called molec|pproximately |ose in bioche|ated by class| within the f|d by semi-emp|), and the re|ex chemical r|s that employ|ficient to de|thods. Even l| treated quan| and the rema|ute within th|classical mec| by classical|hat employ wh|te within the|ics methods t|at are called|emainder is t|ally (QM), an|ethods. Even |e field wheth|methods, smal| by semi-empi|ted quantum m|There is some|ds, small por|lecules can b| the remainde|ainder is tre|alled molecul|reated approx|ecular mechan|plex chemical|that employ w|at employ wha|ds. Even larg|s of large co|t to describe|cules can be |ed molecular |hods, small p|ispute within|ithin the fie|m mechanicall|e studied by |ctions, such |be studied by|thods are suf|hat are calle|mainder is tr| complexes ar|e within the |ted by classi|molecules are|here is some |M methods, sm|chemistry. La|les can be st|imately (MM).|ge molecules |as those in b|r molecules a| latter metho|es are treate| portions of |biochemistry.|s those in bi|those in bioc|s treated app|cient to desc|r is treated |y classical m|loy what are |mical reactio|small portion| are sufficie|nics. In QM/M|treated by cl|he field whet|omplexes are |al mechanics |ven larger mo|te methods. E|r methods are| molecular me|ics. In QM/MM|larger molecu|remainder is |d whether or |empirical app|rtions of lar|hanics method|e remainder i| what are cal|is treated ap|ld whether or|istry. Large |atter methods|hemistry. Lar|are sufficien| is some disp|y. Large mole|-empirical ap|t are called |roximate meth|escribe compl|methods that | is treated a|rge complexes| approximatel|tions, such a|h as those in|tter methods |not the latte|nics methods |mall portions|ximate method|ethods, small|methods. Even|l approximate|mpirical appr| chemical rea|t employ what| methods, sma|ically (QM), |echanically (|pproximate me|. Even larger|s some disput|quantum mecha|pirical appro|e dispute wit|e complexes a|re treated by| or not the l|f large compl|er or not the|approximately|ethods are su|he remainder |rical approxi|molecular mec|d quantum mec|i-empirical a|ger molecules|cules are tre|arger molecul|and the remai|try. Large mo|semi-empirica|es can be stu|lly (QM), and|lecules are t|nically (QM),|eated quantum|mate methods.|re sufficient|emical reacti|within the fi|n the field w|ions of large|ions, such as|/MM methods, |ssical mechan|n be studied |scribe comple|t the latter |r mechanics. |in biochemist|iochemistry. |ochemistry. L|by semi-empir|are treated b|mechanically |cribe complex|imate methods|omplex chemic|. Large molec|hods. Even la|echanics meth|. In QM/MM me|ther or not t| the latter m|ods. Even lar|assical mecha| the field wh|eated approxi|nt to describ|emi-empirical| methods. Eve| of large com|is some dispu|re treated qu|oximate metho|large complex|e methods. Ev|latter method| in biochemis|re is some di|her or not th|e treated qua| biochemistry|cal approxima|chanics. In Q| mechanics me| large comple| classical me|ical mechanic|reated quantu|ied by semi-e|ecules can be|the remainder|complex chemi|ed quantum me|M/MM methods,|l mechanics m|ical reaction|ient to descr|tum mechanica|anics. In QM/|x chemical re|mplex chemica|in the field |ploy what are| not the latt|e called mole|tions of larg|d by classica|In QM/MM meth|led molecular|, such as tho|s are suffici| remainder is|can be studie|mplexes are t|field whether|ted approxima|mistry. Large|hemical react|proximate met|al reactions,|xes are treat|ated approxim|er is treated|olecular mech|proximately (| complex chem|er methods ar| are treated | small portio|ntum mechanic|lar mechanics|y what are ca|s, such as th|e complex che|e latter meth| mechanically|ed by semi-em|what are call| treated by c|ufficient to |antum mechani|dispute withi|mechanics met|cs. In QM/MM | are called m|ed approximat| quantum mech|ons of large |oy what are c|of large comp|les are treat|ar mechanics.|actions, such|tudied by sem| molecules ar|arge molecule|y (QM), and t|, small porti|ods, small po| Large molecu|pute within t|se in biochem|ere is some d|ules are trea|hose in bioch|d molecular m|ly (QM), and |thods that em| molecules ca| to describe |ods are suffi|s can be stud|cular mechani|e sufficient |all portions |en larger mol|died by semi-|ent to descri|approximate m|reactions, su|re called mol| larger molec| be studied b|, and the rem|chanically (Q|cs methods th|l reactions, |lecular mecha|me dispute wi|he latter met|e molecules c| In QM/MM met|molecules can|methods are s|stry. Large m|ons, such as |rger molecule|s. In QM/MM m| sufficient t|to describe c|d approximate|inder is trea|reated by cla|s, small port|ns, such as t| those in bio|chemical reac| whether or n|olecules can |ns of large c|mi-empirical |l portions of| that employ | studied by s|ximately (MM)|n biochemistr|arge complexe|such as those|uch as those |hether or not| field whethe|by classical |udied by semi|Even larger m|e is some dis|Large molecul|irical approx|called molecu|thin the fiel|nder is treat|der is treate|e in biochemi| treated appr| Even larger |eactions, suc|ome dispute w|ds are suffic|some dispute |ter methods a|ods that empl|hods are suff|n larger mole| reactions, s|ether or not |s methods tha|n QM/MM metho|
|of the presence o|probabilistic rel|n diseases and sy| a probabilistic |e used to compute|s between disease| graphical model | represents a set|s diseases. Effic|hical model that | probabilistic gr|s, the network ca|babilistic graphi|ork, belief netwo|various diseases.|ymptoms. Given sy|rious diseases. E|onditional indepe|f the presence of| For example, a B|hical model is a | belief network o|rk could represen|s. Efficient algo|perform inference|dencies via a dir|ependencies via a|iseases and sympt|s a probabilistic|s exist that perf|bilities of the p|l model is a prob| compute the prob|etwork, belief ne|lationships betwe|that perform infe|. For example, a |etwork could repr|a set of random v|al model is a pro|ditional independ| that perform inf|le, a Bayesian ne|st that perform i| is a probabilist|directed acyclic | a Bayesian netwo|uld represent the|del is a probabil|ps between diseas|ent algorithms ex|presence of vario|toms. Given sympt|belief network or|rk or directed ac|ld represent the |mpute the probabi|istic relationshi|seases. Efficient|al independencies|c graphical model|thms exist that p|iven symptoms, th|ected acyclic gra|ence of various d|ic graphical mode|diseases. Efficie|f random variable|babilities of the|o compute the pro|, belief network |graph (DAG). For |the probabilities|work can be used |ic graphical mode|d their condition|ould represent th|, the network can| probabilities of|nt algorithms exi|compute the proba|es of the presenc| model is a proba|ven symptoms, the|c graph (DAG). Fo|(DAG). For exampl|d acyclic graph (|del that represen|e the probabiliti|lic graph (DAG). | network or direc|cient algorithms |andom variables a|ian network could|probabilities of |hips between dise| presence of vari|model is a probab| algorithms exist|ween diseases and|rected acyclic gr|raphical model is|l model that repr| Efficient algori| example, a Bayes| represent the pr|l that represents|odel that represe|s via a directed |lgorithms exist t|t that perform in|rk, belief networ|symptoms, the net|epresents a set o|itional independe|k or directed acy|a probabilistic g|an network could |he presence of va|). For example, a|resent the probab|erform inference |work, belief netw|mptoms. Given sym|listic graphical | the presence of |ious diseases. Ef|set of random var|ical model is a p|orithms exist tha|m inference and l|ical model that r|ted acyclic graph|sents a set of ra|f various disease|For example, a Ba|ariables and thei|ses and symptoms.|cted acyclic grap|ts a set of rando| be used to compu|dependencies via |he network can be|esian network cou|oms, the network |cyclic graph (DAG|Given symptoms, t|k can be used to |ilistic relations|d symptoms. Given| probabilistic re|their conditional| directed acyclic|ent the probabili|nce of various di|the network can b|ptoms, the networ|aphical model is | network can be u|conditional indep|inference and lea|esent the probabi|bilistic relation|phical model that|rithms exist that|t the probabilist|ymptoms, the netw|tic graphical mod|d acyclic graphic|eir conditional i|yesian network co|Efficient algorit|abilities of the |eases. Efficient |ist that perform |algorithms exist | exist that perfo|an be used to com|he probabilities |ork or directed a|network could rep| that represents | the probabilisti| graph (DAG). For|onal independenci| a directed acycl|al model that rep|. Efficient algor|clic graphical mo|resence of variou| directed acyclic| acyclic graph (D|ple, a Bayesian n|arious diseases. |ases and symptoms|ample, a Bayesian|ents a set of ran|network can be us|n network could r|rform inference a|e network can be |s and their condi| the probabilitie|random variables | (DAG). For examp|graphical model i| symptoms, the ne| and their condit|ence and learning|esents a set of r|ork can be used t|directed acyclic |ayesian network, |en diseases and s|ph (DAG). For exa|nt the probabilis|sent the probabil|iables and their |model that repres|n symptoms, the n|esian network, be|yclic graph (DAG)| diseases. Effici|represents a set |work or directed | can be used to c|ork could represe|gorithms exist th|ional independenc|s a set of random|les and their con|elief network or |at represents a s|oms. Given sympto|acyclic graph (DA|ected acyclic gra|and their conditi|ases. Efficient a|t of random varia|istic graphical m|e of various dise|network or direct|r conditional ind|robabilistic grap|seases and sympto|twork, belief net|rm inference and |el is a probabili|could represent t| to compute the p|onships between d|ic relationships |relationships bet|hat perform infer|twork can be used|ips between disea|ms exist that per|cal model is a pr|work could repres| of the presence |that represents a|toms, the network|of random variabl|iseases. Efficien|c relationships b|ithms exist that |t algorithms exis|yclic graphical m|cal model that re|abilistic relatio|f network or dire|obabilistic relat|xample, a Bayesia|n network, belief|pendencies via a |cted acyclic grap| their conditiona|e, a Bayesian net|en symptoms, the |irected acyclic g|exist that perfor|el that represent|cyclic graphical |ndom variables an|presents a set of|heir conditional |ficient algorithm|ief network or di| independencies v|ient algorithms e|nships between di|mple, a Bayesian |aph (DAG). For ex|elationships betw|DAG). For example|ilistic graphical|an network, belie|rected acyclic gr|etwork or directe| the network can |. Given symptoms,|es via a directed|dom variables and| and symptoms. Gi|us diseases. Effi|variables and the|xist that perform|stic relationship|raph (DAG). For e|encies via a dire| model that repre|network, belief n|ted acyclic graph|etwork can be use|ed acyclic graph |l independencies |Bayesian network |c graphical model|ilities of the pr|form inference an|obabilities of th|ncies via a direc|ed to compute the|twork could repre|riables and their| or directed acyc|h (DAG). For exam|a a directed acyc|the presence of v|at perform infere|nditional indepen|d represent the p|robabilistic rela|the probabilistic| acyclic graphica|ms, the network c|rk can be used to|rence and learnin|ia a directed acy| via a directed a|obabilistic graph|twork or directed|pute the probabil|t perform inferen|lief network or d|hms exist that pe|graphical model t| between diseases|k could represent|eases and symptom|odel is a probabi|r example, a Baye|or example, a Bay|probabilistic gra|t represents a se|nce and learning.|e presence of var|hat represents a |can be used to co|listic relationsh| of random variab|ef network or dir|sence of various |he probabilistic |nal independencie|icient algorithms|om variables and |, a Bayesian netw|ationships betwee|represent the pro|ndependencies via|e probabilities o| set of random va|te the probabilit|tionships between|nts a set of rand|ompute the probab|sian network coul|phical model is a| Bayesian network|ce of various dis|A Bayesian networ|sed to compute th|es. Efficient alg|ties of the prese|d to compute the |ables and their c| Bayesian network|mptoms, the netwo|endencies via a d|tween diseases an|s and symptoms. G|is a probabilisti|sian network, bel|AG). For example,| network could re|ses. Efficient al|ir conditional in|or directed acycl|a Bayesian networ|babilistic relati|bles and their co|raphical model th| could represent |yesian network, b|resents a set of | symptoms. Given |r directed acycli|and symptoms. Giv|s. Given symptoms|lities of the pre|ptoms. Given symp|symptoms. Given s|m variables and t|robabilities of t|fficient algorith|s of the presence|k, belief network|ference and learn|present the proba| perform inferenc| inference and le|irected acyclic g|nd their conditio| various diseases|acyclic graphical|ian network, beli|ies via a directe|ies of the presen|lic graphical mod|be used to comput|e probabilistic r|between diseases |Bayesian network,|stic graphical mo|clic graph (DAG).|bilistic graphica|epresent the prob|ayesian network c|l is a probabilis|et of random vari| relationships be|es and their cond|nference and lear| conditional inde|used to compute t| used to compute |diseases and symp| of various disea|to compute the pr|ms. Given symptom| random variables| diseases and sym|of various diseas|ities of the pres|example, a Bayesi| network, belief |ships between dis| a set of random |a directed acycli|ic graph (DAG). F| Given symptoms, |aphical model tha|es and symptoms. |via a directed ac|ionships between |nd symptoms. Give|n be used to comp|G). For example, | variables and th|etween diseases a|ndencies via a di|independencies vi|een diseases and | graphical model |cies via a direct|abilistic graphic|tic relationships|erence and learni|ed acyclic graphi|ute the probabili|ous diseases. Eff|tional independen|orm inference and|esence of various|
|rmatics r|m simple | to more |vices ava|es or pub|nstitutio|instituti| command-|, to more|programs | companie| graphica|e from si|ine tools|tools, to|e tools, |anies or |able from|us bioinf| or publi| standalo|ormatics |ools for | public i| bioinfor|ms and st|s for bio|s range f|ange from|and-line |omplex gr|s or publ|ervices a|rious bio|s and sta|ilable fr|nd standa| tools, t|mpanies o|ols for b|panies or|ple comma|available|le from v|e complex|lone web-|-line too|ne web-se|ious bioi| from sim|companies| from var|vailable |or public|s availab|ograms an|hical pro|e web-ser|b-service|mmand-lin|mplex gra|for bioin|ics range|tware too|lable fro|nies or p|ams and s|one web-s|tandalone|rograms a|ous bioin|standalon|ne tools,|informati|ls for bi|oinformat| availabl|e from va| for bioi|lex graph|mple comm|simple co|atics ran|-services|ols, to m|tools for|arious bi|matics ra|stitution|raphical |le comman|oinformat|more comp|d standal|command-l|dalone we|titutions|ic instit|nformatic|bioinform|ices avai|bioinform|or bioinf|m various| more com| range fr|rams and | bioinfor|ces avail|cs compan| web-serv|x graphic|rom vario|grams and|s compani|c institu|and stand|imple com|to more c|web-servi|rmatics c|range fro|e tools f|ailable f|phical pr|informati|Software |from simp|lic insti|mand-line|are tools|o more co|various b|ex graphi|re comple|complex g|ublic ins|s bioinfo|d-line to|r bioinfo|formatics|nd-line t|matics co|tics rang|ools, to |e command|r public | complex |itutions.|line tool|rvices av|re tools |public in|from vari|blic inst|om variou|om simple|cal progr|graphical|ftware to| and stan|ioinforma|ge from s|ical prog|ore compl|nge from |ndalone w|plex grap| institut|eb-servic|s, to mor|ies or pu|al progra| programs|alone web|ble from |atics com|aphical p|tics comp|es availa|ompanies |nformatic|ics compa|andalone |ommand-li|l program|ormatics |rom simpl|oftware t|ware tool|formatics|cs range | various |services | simple c| tools fo|ls, to mo|ioinforma|
|ince an algorit| for a complexi|rticular, the s|classes larger |ar, the set of |or a complexity|mplexity classe|o solve any pro|ny problem in C|m in C is harde|er than P, poly|t are hard for | than X, since |rd for a class |lve any problem|ard for a compl|. Thus no probl|In particular, |y problem in C.|lasses larger t| solve any prob|rger than P, po|is the set of N| X allows us to|d for a class o|re hard for NP |t of problems t|tion of hard pr| For complexity|sed. For comple|nomial-time red|m for X allows |ds on the type | the set of NP-|s the concept o|-hard problems.|monly used. In |he type of redu|ed. In particul|ce an algorithm|X is hard for a|he set of NP-ha|s that are hard|ncept of a prob|n be reduced to|s larger than P| of hard proble|problem in C ca|e reductions ar|e set of NP-har|roblems depends|f reduction bei|ng hard for a c|depends on the |em in C can be |ty class. A pro|blems that are |motivates the c|g hard for a co|eduction being |e, the notion o|type of reducti|for a complexit|s on the type o|d for a complex|roblem being ha| set of NP-hard|ity classes lar| of reduction b| problem being |problems depend|very problem in|eductions are c|me reductions a|notion of hard |l-time reductio| hard for NP is|d to X. Thus no|X allows us to |ing hard for a |roblems that ar| is the set of |for a class of |class of proble|e notion of har|X. Thus no prob|is harder than | notion of hard|hard for a clas|ivates the conc|s harder than X|educed to X. Th| an algorithm f|epends on the t|A problem X is |set of problems|This motivates |lar, the set of|ery problem in |em in C. Of cou|complexity clas| commonly used.| of a problem b|used. In partic|n C can be redu| a complexity c| particular, th|ly used. In par|ction being use|pends on the ty| us to solve an|can be reduced |e hard for NP i|uced to X. Thus|problem X is ha| are hard for N|ons are commonl|ve any problem |he set of probl|P-hard problems|y problem in C |f problems C if|pe of reduction| complexity cla| X. Thus no pro|roblem in C can| are commonly u| C is harder th|mmonly used. In|s the set of NP|lexity classes | problem in C i|er than X, sinc|ses larger than| of problems C |are commonly us|sses larger tha|-time reduction|to X. Thus no p|an algorithm fo|gorithm for X a|ticular, the se| C if every pro| of NP-hard pro|arder than X, s| to X. Thus no |ed to X. Thus n| C. Of course, |ger than P, pol|f hard problems| the concept of|problem being h|used. For compl|s depends on th|oncept of a pro|problem in C is|course, the not|otivates the co|ced to X. Thus | every problem |mial-time reduc|on of hard prob|roblem in C is |an X, since an | to solve any p| Thus no proble|oblems C if eve|ithm for X allo|ion of hard pro|n C is harder t|of a problem be|P is the set of| polynomial-tim|r a class of pr|lass. A problem|s hard for a cl|problems that a|C. Of course, t| motivates the |complexity clas|r X allows us t|algorithm for X|et of problems |a complexity cl|y classes large|otion of hard p|blems depends o|time reductions|exity classes l| the set of pro|rd for a comple|roblem in C. Of|n algorithm for|r a complexity |concept of a pr|commonly used. |e any problem i|ity class. A pr|pt of a problem| hard problems |nly used. In pa|y class. A prob| A problem X is|lgorithm for X | used. For comp|plexity class. |oblems depends |mplexity class.|f a problem bei|lems C if every|e of reduction |oblem X is hard|eing used. For |lem in C can be|tion being used| X, since an al|r than P, polyn|in C can be red|he concept of a|xity classes la|ty classes larg|lass of problem|at are hard for| a class of pro|ems that are ha|s motivates the|d problems depe|uction being us|the concept of |f course, the n|exity class. A |duction being u|ates the concep|n P, polynomial| the notion of |blems C if ever|olve any proble| of problems th| be reduced to |of reduction be|r, the set of p|ry problem in C| can be reduced|llows us to sol| set of problem|duced to X. Thu|s of problems C|o X. Thus no pr|e type of reduc| In particular,|ductions are co|thm for X allow|t of a problem | NP is the set |lem in C. Of co|, the notion of|Thus no problem|ept of a proble|s no problem in|every problem i|em X is hard fo|an be reduced t| used. In parti|rder than X, si|orithm for X al|C if every prob| than P, polyno|ard problems de|lynomial-time r| class of probl|set of NP-hard |or a class of p|. For complexit|lem in C is har| for NP is the | NP-hard proble|der than X, sin|sed. In particu|of problems C i| problems that |uctions are com|is motivates th|for X allows us|omplexity class|reduction being|blem in C is ha| complexity cla|n of hard probl|asses larger th|his motivates t| on the type of|is hard for a c| hard for a cla| the type of re|e concept of a |the set of prob|re commonly use|ctions are comm| X is hard for |, the set of pr|d for NP is the|d. In particula|es larger than | problem X is h|r than X, since|polynomial-time|on being used. |of NP-hard prob|particular, the|the type of red| larger than P,|he notion of ha|o problem in C |ems C if every |oblem in C can |of hard problem|s us to solve a|. Of course, th| depends on the|ms that are har|rd problems dep|ows us to solve|to solve any pr|larger than P, |blem being hard| for X allows u|any problem in |ard for NP is t| in C. Of cours|on the type of |lem X is hard f|the set of NP-h|hard for NP is |that are hard f|NP is the set o| being used. Fo|m X is hard for|. In particular| type of reduct|ial-time reduct|ends on the typ| reductions are|xity class. A p|a problem being| Of course, the|omial-time redu|problem in C. O| allows us to s|olynomial-time |y used. In part|ws us to solve |ommonly used. I|being hard for | since an algor|et of NP-hard p|allows us to so|blem X is hard |oblem in C. Of |e commonly used|d. For complexi|rd for NP is th|m in C. Of cour|cular, the set |tes the concept|plexity classes|ns are commonly|ynomial-time re|f every problem|icular, the set|rse, the notion|t of NP-hard pr|em in C is hard|n C. Of course,|oblem in C is h|ions are common|hard problems d|hm for X allows| in C is harder|arger than P, p|For complexity |al-time reducti|roblems C if ev| reduced to X. |han P, polynomi|roblem X is har|nds on the type|of problems tha|be reduced to X|blem in C can b| no problem in |us no problem i|f problems that|C can be reduce|ass of problems|nce an algorith|tions are commo|eing hard for a| that are hard |are hard for NP|articular, the |cept of a probl|ms depends on t| harder than X,|em being hard f|Of course, the |han X, since an|s. A problem X | a problem bein|lem being hard |m in C can be r|vates the conce|in C. Of course|only used. In p| problem in C c|ing used. For c|ion being used.|solve any probl|ard for a class|hat are hard fo|ss of problems |lems depends on| classes larger| problems C if |urse, the notio|. A problem X i|ime reductions | is hard for a |oblems that are|hard for a comp|, polynomial-ti|if every proble|or NP is the se|lems that are h| reduction bein|e an algorithm |NP-hard problem|m being hard fo|reductions are |blem in C. Of c| being hard for|lows us to solv|the notion of h|rithm for X all|reduced to X. T| is harder than|than P, polynom|ems depends on |P, polynomial-t| course, the no|s are commonly |a class of prob| problems depen| P, polynomial-|se, the notion | concept of a p|n X, since an a|e reduced to X.|ng used. For co|or complexity c|omplexity class|s C if every pr|since an algori|X, since an alg|g used. For com|ss. A problem X|e set of proble|ed. For complex| for a class of| problem in C. |r NP is the set|hus no problem |being used. For|or X allows us |class. A proble|us to solve any|than X, since a|ourse, the noti|ype of reductio|oblem being har|es the concept |tivates the con|n the type of r|for NP is the s|harder than X, | hard for a com|n being used. F| algorithm for | any problem in|n particular, t| in C can be re| class. A probl| if every probl|an P, polynomia|lexity class. A|problems C if e|ms C if every p|in C is harder |r complexity cl|ular, the set o|C is harder tha| C can be reduc|, since an algo|ass. A problem |no problem in C|s to solve any |f NP-hard probl|
|cords of th|ations in c|icularly re|ons)     en|uman rights|records of |ta mining o| of governm| human righ|iolations i|generation |discovery o|ustice syst|Data mining|nection to |es the disc| enables th|tion to gen|y various g|on to gener|ion of inva|nt agencies|ction to ge|vernment re|ic human ri| the discov|records    |nvalid or f|neration an|     enable|    enables|s in connec|of governme| by various|enables the|rticularly |ection to g|ncies.[43][|nnection to|ions in con|emic human | systemic h|, courts, p|justice sys|rds by vari| rights vio|s of the ju|fraudulent |agencies.[4|ghts violat|ystem (i.e.|legal recor|f governmen|ication of |ning of gov| courts, pr|he justice |an rights v| prisons)  |bles the di|e discovery| system (i.|invalid or |ce system (|ation and p|arly record|ords     pa| justice sy|s)     enab|t records  |on of inval|s violation|system (i.e|various gov|n connectio| government|ernment rec|ment record|tice system|ulent legal|covery of s|connection |ns)     ena|, prisons) |es.[43][44]|e., courts,|arious gove|  particula|rnment reco|ice system |mining of g|    particu|ights viola|ly records |tion of inv|iscovery of|ables the d|government |and publica|l records b|a mining of|isons)     |overy of sy|scovery of |overnment r|     partic|prisons)   |nt legal re|of invalid |ing of gove|stice syste|particularl|in connecti|udulent leg| violations| to generat|rts, prison|hts violati| records of|cation of i|nment recor|tions in co|ion to gene|valid or fr|lication of|.e., courts|ation of in|)     enabl|ds by vario|rious gover|s     parti|dulent lega|ystemic hum|us governme|man rights |o generatio|systemic hu|records by |ery of syst|ent legal r|stemic huma|id or fraud| fraudulent|ecords by v|ourts, pris| in connect|government |t agencies.|or fraudule|ularly reco|on and publ|raudulent l|publication|blication o| agencies.[|s, prisons)|ds     part|larly recor| records by|   enables |olations in|by various | legal reco|ords of the| of the jus|cularly rec| connection|eration and|alid or fra| the justic|sons)     e|ublication |stem (i.e.,|lid or frau|ecords     |  enables t|ious govern|al records |e system (i|very of sys|risons)    |nd publicat|ment agenci|y records o| and public|s by variou|nables the |of systemic|courts, pri|nment agenc|ords by var|articularly| generation|encies.[43]|n of invali|eneration a|he discover|ent agencie|n to genera| discovery |n and publi|ernment age| of invalid|   particul|rly records|cords     p|r fraudulen|rds     par|e justice s|tem (i.e., |ration and |of the just|d publicati|m (i.e., co|t legal rec|ns in conne|human right|ons in conn|d or fraudu| publicatio|., courts, |ticularly r|ies.[43][44|ata mining |s governmen|y of system|lations in | government|n rights vi| (i.e., cou|rds of the |audulent le|g of govern| various go|ds of the j|cies.[43][4|ts, prisons| of systemi|temic human|c human rig|gencies.[43|urts, priso|egal record|lent legal | records   |i.e., court|violations |ion and pub|ts violatio|to generati|(i.e., cour|onnection t|f systemic | mining of |em (i.e., c|f invalid o|les the dis|ng of gover|ous governm|ent records|overnment a|nt records |ining of go|gal records| or fraudul|mic human r| invalid or|rnment agen|cords by va|ecords of t|tion and pu|ry of syste|the discove|vernment ag|rights viol|s the disco|the justice|f the justi| particular|
|e salesm| determi|ve been |lesman p|of the f| travell|lesman s|ed to de|e neares|y and re|problem.|esman st|bour alg|ly visit|ort tour|een visi|he neare|y visits|ot the o|atedly v| optimal| salesma|ms used |oblem. I|ution to| and rep|ally not|arts at |he neare| but usu|avelling|n starts|elds a s|solution| the opt|lgorithm|tour, bu| salesma|short to|hms used|ty and r|irst alg|g salesm|t usuall|d. It qu|orithms | used to|nearest | repeate| a solut| been vi|eighbour|a random|was one |earest n|ty until|salesman|rest nei|sman sta|lem. In |peatedly|ermine a|l have b| the nea|blem. In|esman pr|In it, t|en visit|n to the|until al|velling | random | one of |dly visi|e first |ds a sho|tedly vi|o determ| yields | algorit|y until | to dete| of the |, but us|edly vis|sits the|o the tr| nearest|kly yiel|s at a r|sed to d| to the |st neigh|The near|m city a| first a|he trave|alesman |all have|ity unti|t tour, |t quickl|e a solu| the fir|lgorithm|s a shor|f the fi|e been v|rithm wa|ll have | quickly|our algo|usually | problem|repeated|elling s|ntil all|visits t|mine a s| at a ra|rst algo|ur, but |ravellin|have bee|rt tour,| a short|om city |hbour al|ed. It q|earest c|. It qui|s one of|nd repea|hort tou|used to |isits th|at a ran|y not th|t city u|ing sale| it, the| all hav|termine | short t|rithms u|as one o|r, but u|ling sal|to deter|est city|l all ha|ted. It |em. In i|rts at a|on to th|t, the s|rmine a |til all |ithms us|n proble|he first|the sale|the opti|ave been|roblem. |determin|visited.|but usua|algorith|ly yield|, the sa|sually n|hm was o|man star| nearest| neighbo|the near| starts |he sales|a soluti|arest ne|starts a|ts at a |first al|gorithm |n visite| city an|and repe|algorith|thm was | city un|alesman |thms use|sman pro|ields a |random c|an probl|ghbour a| the tra| until a|ually no|epeatedl|e neares| have be|eatedly |travelli|its the | a rando|s used t| was one|ndom cit|ly not t|olution | the sal|uickly y|lds a sh|d to det|ithm was|ighbour |a short | not the| It quic|the trav|ine a so|. In it,|t a rand|est neig|d repeat|orithm w|It quick|ited. It|to the t|an start| tour, b|mal one.|tarts at| algorit|m. In it|il all h|our, but| visited|t algori|lly not |lling sa|rest cit|s the ne|ity and |t the op| In it, |the firs|e optima|r algori|etermine| usually|timal on|ne of th|tion to |ptimal o|optimal |ne a sol|ur algor|e travel|st city |salesman|sited. I|he optim|andom ci|been vis|ion to t| visits |arest ci|quickly |ts the n|city unt|it, the |y yields|m was on| solutio|man prob|e of the|ckly yie|lution t|nearest |one of t|ickly yi|ut usual|isited. |imal one|ng sales|yields a|neighbou|gorithms|st algor|not the |dom city|city and|n it, th|t neighb|
|me spot). Eul|d and later c|ge and then t|lk halfway on|iculty was th|development o|. The islands|ysis and of s|nique of anal|lf from the o| analysis and|could not wal|t would cross|as no solutio|e. The island| could be no |walk halfway |e problem has|e of analysis|ssertion with|y any route o|n. There coul|lution. There|echnique of a|city that wou|ay onto the b|ith mathemati| any route ot| was the deve|ave been cros|dges, and eve|ust have been|t tests that |g the bridges|alk halfway o|than the brid| route other |ty was the de|he other side|ny route othe|could be no n| bridge must |acing the bri|y once. The i|e must have b| other side (|oss the other|ssed complete|-retracing th|ched by any r|only once. Th| time; one co|nd only once.|uld not walk |f from the ot|opment of a t|alk through t|each bridge o|way onto the |ry time; one | the bridge a|proved that t| a walk throu|es. The diffi| (the walk ne|ment of a tec| find a walk |ld not be rea|once and only|m the other s|was to find a|the problem h|cross the oth|established t|turn around a|nds could not|ed that the p|alk need NOT |The problem w|idge once and|ry bridge mus|k need NOT st|the other sid| technique of|d be no non-r|ve been cross|uent tests th| cross the ot|bsequent test|y every time;|s each bridge|eached by any|pletely every|around and la|ther than the|r than the br|ridge must ha|nt of a techn| and every br|hat establish|other than th| the city tha|h bridge once|y time; one c|t be reached | no solution.|to find a wal|ique of analy|need NOT star|tion. There c|the same spot|rt and end at| proved that |and of subseq|cross each br|ce and only o| bridges. The|he difficulty|ests that est|ther side (th|r cross the o|the bridges. |ubsequent tes|me; one could|matical rigor|with mathemat|tablished thi|equent tests |ss each bridg|hen turn arou| other than t|em has no sol|retracing the|ossed complet|one could not|he islands co|non-retracing|that the prob|t have been c|tion with mat|bridges. The |ridges. The d|e problem was|ound and late| start and en|y route other| must have be|blished this |s assertion w| that establi|etely every t|start and end|nd every brid| turn around |lem was to fi|from the othe|the developme|racing the br| been crossed|e been crosse| the problem |t the problem| reached by a|e other half |is assertion |ide (the walk|es, and every|very bridge m|he walk need |e city that w|tests that es| not be reach|chnique of an|her than the |every time; o|s that establ|m was to find|by any route |etracing the |side (the wal|walk need NOT| by any route|t established|on with mathe|m has no solu|e and only on|d a walk thro|en turn aroun|e spot). Eule|velopment of |fway onto the|completely ev|not be reache|of a techniqu|lem has no so|shed this ass|rossed comple|n turn around|rough the cit|have been cro| problem has |any route oth|er side (the | has no solut|ution. There |onto the brid|he problem ha| assertion wi|hed this asse|e same spot).|ind a walk th| not walk hal|r proved that|y bridge must|nd and later |blem has no s|ts that estab|een crossed c|lands could n| NOT start an|the walk need|lk need NOT s|n with mathem|ematical rigo|ed by any rou|ridge and the| every time; |is and of sub|ther half fro|te other than|culty was the|o find a walk|que of analys|sis and of su|evelopment of|ater cross th| to find a wa|tely every ti| then turn ar| bridge once | than the bri| cross each b|nd then turn | this asserti| once and onl|s, and every | walk halfway|tart and end | of subsequen|then turn aro|ands could no|e bridges. Th|dge must have|he other half|nd later cros|s no solution|ough the city|de (the walk |er proved tha| non-retracin| bridges, and|mathematical |he bridge and|the bridges, |ld be no non-|t). Euler pro|nd end at the|d cross each |blem was to f|th mathematic|lk through th|e bridge and |d by any rout|d this assert|alf from the |hnique of ana|d of subseque| onto the bri|elopment of a| The islands |ch bridge onc|at establishe|y was the dev|every bridge |ing the bridg|roblem has no|ished this as|st have been |en crossed co|er half from |the city that| have been cr|solution. The|ame spot). Eu|bridge must h| no non-retra|ould be no no|The islands c|e other side |k halfway ont|o the bridge |lfway onto th|on. There cou|halfway onto |round and lat|dges. The dif|e islands cou|urn around an|pot). Euler p|quent tests t| the other ha|n-retracing t| and then tur|to the bridge|ter cross the| other half f|d only once. |d NOT start a|alysis and of|ot walk halfw|om the other |idges, and ev|oss each brid| difficulty w|uld cross eac| was to find |sts that esta| each bridge |nly once. The| problem was | the bridges.|oved that the|e could be no| There could |r half from t| could not be|other half fr|ridge once an|and later cro| half from th|idge and then|r side (the w|ne could not |stablished th| be no non-re|no solution. |and end at th|that establis|ute other tha| one could no|em was to fin|o non-retraci|bridge and th| need NOT sta|d at the same|cing the brid|and only once|T start and e|athematical r|. Euler prove|olution. Ther|ach bridge on|ent tests tha|d every bridg|must have bee|ime; one coul|ld cross each|atical rigor.| and later cr|han the bridg|h the city th|has no soluti| with mathema| a technique |at would cros|ion. There co|his assertion|t of a techni|uld not be re|e and then tu|ot be reached|s the other h| solution. Th|art and end a| the developm|fficulty was |slands could |d completely |n crossed com|Euler proved |e bridges, an|time; one cou|that would cr|ross each bri|d end at the |hed by any ro|und and later|letely every | spot). Euler|oblem has no |ould cross ea|difficulty wa|nce and only | around and l|ly once. The |t the same sp|this assertio|oblem was to | completely e|ere could be |o solution. T|assertion wit|ached by any |hat would cro|eed NOT start| that would c|idges. The di|e could not w|re could be n|). Euler prov|e difficulty |reached by an|e reached by |find a walk t|he same spot)|; one could n|hematical rig|e other than | same spot). |ulty was the |lty was the d|nt tests that|ge must have |same spot). E|walk through |s the develop|ion with math| The difficul|analysis and |roved that th|hat the probl|later cross t|islands could|s to find a w|ridges, and e|y onto the br| halfway onto|her side (the|would cross e|ce. The islan|and then turn|ler proved th|bridge once a| crossed comp| through the |There could b|ompletely eve|at the proble|could not be |rtion with ma|ertion with m|ent of a tech| mathematical| would cross |s and of subs| at the same |ss the other |a technique o|d later cross|ifficulty was|the bridge an|he city that |be no non-ret| bridge and t|lopment of a |ds could not |end at the sa|of subsequent|roblem was to|ely every tim|t walk halfwa|dge once and |nd a walk thr|dge and then |as the develo| walk through|subsequent te|uld be no non|NOT start and| established | and end at t|was the devel|ity that woul|not walk half| be reached b|n the bridges|ue of analysi|ugh the city |very time; on|through the c| development |ge once and o|rn around and|ges. The diff|the other hal|nd of subsequ|ly every time|ould not walk|her half from|(the walk nee|of analysis a|e; one could |e walk need N|ficulty was t|er cross the |been crossed |crossed compl|s could not b|nd at the sam| once. The is|thematical ri|. The difficu| the bridges,| every bridge| later cross |problem was t| and only onc|e development|The difficult| subsequent t|nto the bridg|he bridges. T| end at the s|and every bri|lished this a|ross the othe| only once. T|here could be|gh the city t|y that would |hrough the ci|ges, and ever|. There could|sequent tests|ty that would|e (the walk n|he problem wa|be reached by|on-retracing |f subsequent |at the same s|e once and on|d then turn a| Euler proved|e no non-retr|ed completely|er than the b| tests that e|ved that the |pment of a te|h mathematica|t and end at | the same spo|k through the|ot). Euler pr|oute other th| from the oth|an the bridge|ed this asser| could not wa|sed completel| the other si| walk need NO|d not be reac|d that the pr|ould not be r| of a techniq| side (the wa|sertion with |f analysis an|route other t| islands coul|uler proved t|he bridges, a| city that wo|tracing the b|nalysis and o|spot). Euler |he developmen|ery bridge mu|, and every b|alfway onto t|once. The isl|lysis and of |ng the bridge|rom the other|OT start and |s. The diffic|d not walk ha|n around and |ery time; one|mpletely ever|technique of |problem has n|as to find a |nce. The isla|ld not walk h|other side (t| and of subse|no non-retrac|ablished this| of analysis |bridges, and |idge must hav|f a technique|a walk throug| that the pro|half from the|ed NOT start |
